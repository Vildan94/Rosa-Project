
ROSA.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001c24  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000400  80001e00  80001e00  00002200  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000084  80002200  80002200  00002600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  80002284  80002284  00002684  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         0000050c  00000008  80002288  00002808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .balign       00000004  00000514  80002794  00002d14  2**0
                  ALLOC
  9 .bss          000000c0  00000518  00000518  00000000  2**2
                  ALLOC
 10 .heap         0000da28  000005d8  000005d8  00000000  2**0
                  ALLOC
 11 .comment      000000a0  00000000  00000000  00002d14  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 00000570  00000000  00000000  00002db8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 00000a48  00000000  00000000  00003328  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   0000ae2b  00000000  00000000  00003d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00001bdb  00000000  00000000  0000eb9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00003c75  00000000  00000000  00010776  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00000c44  00000000  00000000  000143ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00001bd4  00000000  00000000  00015030  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    000018ea  00000000  00000000  00016c04  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macinfo 00452bb1  00000000  00000000  000184ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .appstack     00001000  0000e000  0000e000  00000000  2**0
                  ALLOC
 22 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 23 .debug_ranges 000004d8  00000000  00000000  0046b09f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	14 6c       	and	r12,r10

Disassembly of section .text:

80000008 <usart_options>:
80000008:	00 00 e1 00 08 04 00 00 00 00 00 00 74 73 6b 32     ............tsk2
80000018:	00 00 00 00 74 73 6b 31 00 00 00 00 74 73 6b 33     ....tsk1....tsk3
80000028:	00 00 00 00                                         ....

8000002c <task1>:
#include "kernel/rosa_scheduler.h"

#define T_STACK_SIZE 0x40
int Task1_Handle,Task2_Handle,Task3_Handle=0;

void task1(void){
8000002c:	eb cd 40 80 	pushm	r7,lr
80000030:	1a 97       	mov	r7,sp
80000032:	20 2d       	sub	sp,8
	TimerTick LastWakeTime=ROSA_getTickTime();
80000034:	f0 1f 00 11 	mcall	80000078 <task1+0x4c>
80000038:	14 98       	mov	r8,r10
8000003a:	16 99       	mov	r9,r11
8000003c:	ee e9 ff f8 	st.d	r7[-8],r8
	while(1) {
		ledToggle(LED0_GPIO);
80000040:	33 bc       	mov	r12,59
80000042:	f0 1f 00 0f 	mcall	8000007c <task1+0x50>
		ROSA_DelayUntil(&LastWakeTime,250);
80000046:	ee c8 00 08 	sub	r8,r7,8
8000004a:	e0 6a 00 fa 	mov	r10,250
8000004e:	30 0b       	mov	r11,0
80000050:	10 9c       	mov	r12,r8
80000052:	f0 1f 00 0c 	mcall	80000080 <task1+0x54>
		ledToggle(LED0_GPIO);
80000056:	33 bc       	mov	r12,59
80000058:	f0 1f 00 09 	mcall	8000007c <task1+0x50>
		ROSA_TaskDelete(Task2_Handle);
8000005c:	48 a8       	lddpc	r8,80000084 <task1+0x58>
8000005e:	70 08       	ld.w	r8,r8[0x0]
80000060:	10 9c       	mov	r12,r8
80000062:	f0 1f 00 0a 	mcall	80000088 <task1+0x5c>
		ROSA_DelayUntil(&LastWakeTime,250);
80000066:	ee c8 00 08 	sub	r8,r7,8
8000006a:	e0 6a 00 fa 	mov	r10,250
8000006e:	30 0b       	mov	r11,0
80000070:	10 9c       	mov	r12,r8
80000072:	f0 1f 00 04 	mcall	80000080 <task1+0x54>
	}
80000076:	ce 5b       	rjmp	80000040 <task1+0x14>
80000078:	80 00       	ld.sh	r0,r0[0x0]
8000007a:	0d d4       	ld.ub	r4,r6[0x5]
8000007c:	80 00       	ld.sh	r0,r0[0x0]
8000007e:	10 bc       	st.h	r8++,r12
80000080:	80 00       	ld.sh	r0,r0[0x0]
80000082:	0d 34       	ld.ub	r4,r6++
80000084:	00 00       	add	r0,r0
80000086:	05 b4       	ld.ub	r4,r2[0x3]
80000088:	80 00       	ld.sh	r0,r0[0x0]
8000008a:	05 60       	ld.uh	r0,--r2

8000008c <task2>:
}
void task2(void){
8000008c:	eb cd 40 80 	pushm	r7,lr
80000090:	1a 97       	mov	r7,sp
	while(1) {
		ledToggle(LED1_GPIO);
80000092:	33 cc       	mov	r12,60
80000094:	f0 1f 00 04 	mcall	800000a4 <task2+0x18>
		ROSA_Delay(15);
80000098:	30 fa       	mov	r10,15
8000009a:	30 0b       	mov	r11,0
8000009c:	f0 1f 00 03 	mcall	800000a8 <task2+0x1c>

	}
800000a0:	cf 9b       	rjmp	80000092 <task2+0x6>
800000a2:	00 00       	add	r0,r0
800000a4:	80 00       	ld.sh	r0,r0[0x0]
800000a6:	10 bc       	st.h	r8++,r12
800000a8:	80 00       	ld.sh	r0,r0[0x0]
800000aa:	0c ac       	st.w	r6++,r12

800000ac <task3>:
}
void task3(void){
800000ac:	eb cd 40 80 	pushm	r7,lr
800000b0:	1a 97       	mov	r7,sp
	while(1) {
		ledToggle(LED2_GPIO);		
800000b2:	33 dc       	mov	r12,61
800000b4:	f0 1f 00 08 	mcall	800000d4 <task3+0x28>
		Task2_Handle=ROSA_TaskCreate("tsk2",task2,T_STACK_SIZE,6);		
800000b8:	30 69       	mov	r9,6
800000ba:	34 0a       	mov	r10,64
800000bc:	48 7b       	lddpc	r11,800000d8 <task3+0x2c>
800000be:	48 8c       	lddpc	r12,800000dc <task3+0x30>
800000c0:	f0 1f 00 08 	mcall	800000e0 <task3+0x34>
800000c4:	18 99       	mov	r9,r12
800000c6:	48 88       	lddpc	r8,800000e4 <task3+0x38>
800000c8:	91 09       	st.w	r8[0x0],r9
		ROSA_Delay(100);
800000ca:	36 4a       	mov	r10,100
800000cc:	30 0b       	mov	r11,0
800000ce:	f0 1f 00 07 	mcall	800000e8 <task3+0x3c>
	}
800000d2:	cf 0b       	rjmp	800000b2 <task3+0x6>
800000d4:	80 00       	ld.sh	r0,r0[0x0]
800000d6:	10 bc       	st.h	r8++,r12
800000d8:	80 00       	ld.sh	r0,r0[0x0]
800000da:	00 8c       	andn	r12,r0
800000dc:	80 00       	ld.sh	r0,r0[0x0]
800000de:	00 14       	sub	r4,r0
800000e0:	80 00       	ld.sh	r0,r0[0x0]
800000e2:	03 a8       	ld.ub	r8,r1[0x2]
800000e4:	00 00       	add	r0,r0
800000e6:	05 b4       	ld.ub	r4,r2[0x3]
800000e8:	80 00       	ld.sh	r0,r0[0x0]
800000ea:	0c ac       	st.w	r6++,r12

800000ec <main>:
}
int main(void){
800000ec:	eb cd 40 80 	pushm	r7,lr
800000f0:	1a 97       	mov	r7,sp
	ROSA_init();
800000f2:	f0 1f 00 11 	mcall	80000134 <main+0x48>
	Task1_Handle=ROSA_TaskCreate("tsk1",task1,T_STACK_SIZE,6);
800000f6:	30 69       	mov	r9,6
800000f8:	34 0a       	mov	r10,64
800000fa:	49 0b       	lddpc	r11,80000138 <main+0x4c>
800000fc:	49 0c       	lddpc	r12,8000013c <main+0x50>
800000fe:	f0 1f 00 11 	mcall	80000140 <main+0x54>
80000102:	18 99       	mov	r9,r12
80000104:	49 08       	lddpc	r8,80000144 <main+0x58>
80000106:	91 09       	st.w	r8[0x0],r9
	Task2_Handle=ROSA_TaskCreate("tsk2",task2,T_STACK_SIZE,6);
80000108:	30 69       	mov	r9,6
8000010a:	34 0a       	mov	r10,64
8000010c:	48 fb       	lddpc	r11,80000148 <main+0x5c>
8000010e:	49 0c       	lddpc	r12,8000014c <main+0x60>
80000110:	f0 1f 00 0c 	mcall	80000140 <main+0x54>
80000114:	18 99       	mov	r9,r12
80000116:	48 f8       	lddpc	r8,80000150 <main+0x64>
80000118:	91 09       	st.w	r8[0x0],r9
	Task3_Handle=ROSA_TaskCreate("tsk3",task3,T_STACK_SIZE,6);
8000011a:	30 69       	mov	r9,6
8000011c:	34 0a       	mov	r10,64
8000011e:	48 eb       	lddpc	r11,80000154 <main+0x68>
80000120:	48 ec       	lddpc	r12,80000158 <main+0x6c>
80000122:	f0 1f 00 08 	mcall	80000140 <main+0x54>
80000126:	18 99       	mov	r9,r12
80000128:	48 d8       	lddpc	r8,8000015c <main+0x70>
8000012a:	91 09       	st.w	r8[0x0],r9
	ROSA_Scheduler();
8000012c:	f0 1f 00 0d 	mcall	80000160 <main+0x74>
	while(1);
80000130:	c0 08       	rjmp	80000130 <main+0x44>
80000132:	00 00       	add	r0,r0
80000134:	80 00       	ld.sh	r0,r0[0x0]
80000136:	02 04       	add	r4,r1
80000138:	80 00       	ld.sh	r0,r0[0x0]
8000013a:	00 2c       	rsub	r12,r0
8000013c:	80 00       	ld.sh	r0,r0[0x0]
8000013e:	00 1c       	sub	r12,r0
80000140:	80 00       	ld.sh	r0,r0[0x0]
80000142:	03 a8       	ld.ub	r8,r1[0x2]
80000144:	00 00       	add	r0,r0
80000146:	05 b0       	ld.ub	r0,r2[0x3]
80000148:	80 00       	ld.sh	r0,r0[0x0]
8000014a:	00 8c       	andn	r12,r0
8000014c:	80 00       	ld.sh	r0,r0[0x0]
8000014e:	00 14       	sub	r4,r0
80000150:	00 00       	add	r0,r0
80000152:	05 b4       	ld.ub	r4,r2[0x3]
80000154:	80 00       	ld.sh	r0,r0[0x0]
80000156:	00 ac       	st.w	r0++,r12
80000158:	80 00       	ld.sh	r0,r0[0x0]
8000015a:	00 24       	rsub	r4,r0
8000015c:	00 00       	add	r0,r0
8000015e:	05 18       	ld.sh	r8,r2++
80000160:	80 00       	ld.sh	r0,r0[0x0]
80000162:	08 4c       	or	r12,r4

80000164 <ROSA_yieldFromISR>:
 * Comment:
 * 	Perform a yield from an ISR
 *
 **********************************************************/
void ROSA_yieldFromISR(void)
{
80000164:	eb cd 40 80 	pushm	r7,lr
80000168:	1a 97       	mov	r7,sp
	contextSaveFromISR();	  //Save the task context
8000016a:	f0 1f 00 05 	mcall	8000017c <ROSA_yieldFromISR+0x18>
	scheduler();			  //Find next task to execute
8000016e:	f0 1f 00 05 	mcall	80000180 <ROSA_yieldFromISR+0x1c>
	contextRestoreFromISR();  //...and switch over to it.
80000172:	f0 1f 00 05 	mcall	80000184 <ROSA_yieldFromISR+0x20>
}
80000176:	e3 cd 80 80 	ldm	sp++,r7,pc
8000017a:	00 00       	add	r0,r0
8000017c:	80 00       	ld.sh	r0,r0[0x0]
8000017e:	1f 7e       	ld.ub	lr,--pc
80000180:	80 00       	ld.sh	r0,r0[0x0]
80000182:	08 28       	rsub	r8,r4
80000184:	80 00       	ld.sh	r0,r0[0x0]
80000186:	1f b8       	ld.ub	r8,pc[0x3]

80000188 <usart_options>:
80000188:	00 00 e1 00 08 04 00 00 00 00 00 00 49 00 00 00     ............I...

80000198 <Idle_Task>:
tcb *TCBLIST;


bool Search_Queue(tcb *Queue,int HandleId);

void Idle_Task(void){
80000198:	eb cd 40 80 	pushm	r7,lr
8000019c:	1a 97       	mov	r7,sp
8000019e:	20 2d       	sub	sp,8
800001a0:	c0 28       	rjmp	800001a4 <Idle_Task+0xc>
				if(isButton(PUSH_BUTTON_0)==0)
				break;
			}
		}	
		
	}
800001a2:	d7 03       	nop

bool Search_Queue(tcb *Queue,int HandleId);

void Idle_Task(void){
	while(1){
		if (TaskHandleID[0]->priority==HIGHEST_PRIORITY){
800001a4:	49 48       	lddpc	r8,800001f4 <Idle_Task+0x5c>
800001a6:	70 08       	ld.w	r8,r8[0x0]
800001a8:	71 d8       	ld.w	r8,r8[0x74]
800001aa:	59 58       	cp.w	r8,21
800001ac:	cf b1       	brne	800001a2 <Idle_Task+0xa>
			TimerTick FirstWake=ROSA_getTickTime();
800001ae:	f0 1f 00 13 	mcall	800001f8 <Idle_Task+0x60>
800001b2:	14 98       	mov	r8,r10
800001b4:	16 99       	mov	r9,r11
800001b6:	ee e9 ff f8 	st.d	r7[-8],r8
800001ba:	c0 28       	rjmp	800001be <Idle_Task+0x26>
			while(1){
				if(SystemTime>FirstWake+3600000)
				break;
				if(isButton(PUSH_BUTTON_0)==0)
				break;
			}
800001bc:	d7 03       	nop
void Idle_Task(void){
	while(1){
		if (TaskHandleID[0]->priority==HIGHEST_PRIORITY){
			TimerTick FirstWake=ROSA_getTickTime();
			while(1){
				if(SystemTime>FirstWake+3600000)
800001be:	ee ea ff f8 	ld.d	r10,r7[-8]
800001c2:	e0 68 ee 80 	mov	r8,61056
800001c6:	ea 18 00 36 	orh	r8,0x36
800001ca:	30 09       	mov	r9,0
800001cc:	10 0a       	add	r10,r8
800001ce:	f6 09 00 4b 	adc	r11,r11,r9
800001d2:	48 b8       	lddpc	r8,800001fc <Idle_Task+0x64>
800001d4:	f0 e8 00 00 	ld.d	r8,r8[0]
800001d8:	10 3a       	cp.w	r10,r8
800001da:	f2 0b 13 00 	cpc	r11,r9
800001de:	c0 22       	brcc	800001e2 <Idle_Task+0x4a>
				break;
800001e0:	c0 88       	rjmp	800001f0 <Idle_Task+0x58>
				if(isButton(PUSH_BUTTON_0)==0)
800001e2:	35 8c       	mov	r12,88
800001e4:	f0 1f 00 07 	mcall	80000200 <Idle_Task+0x68>
800001e8:	18 98       	mov	r8,r12
800001ea:	58 08       	cp.w	r8,0
800001ec:	ce 81       	brne	800001bc <Idle_Task+0x24>
				break;
800001ee:	d7 03       	nop
			}
		}	
		
	}
800001f0:	cd ab       	rjmp	800001a4 <Idle_Task+0xc>
800001f2:	00 00       	add	r0,r0
800001f4:	00 00       	add	r0,r0
800001f6:	05 1c       	ld.sh	r12,r2++
800001f8:	80 00       	ld.sh	r0,r0[0x0]
800001fa:	0d d4       	ld.ub	r4,r6[0x5]
800001fc:	00 00       	add	r0,r0
800001fe:	05 70       	ld.ub	r0,--r2
80000200:	80 00       	ld.sh	r0,r0[0x0]
80000202:	0e 14       	sub	r4,r7

80000204 <ROSA_init>:
}
void ROSA_init(void)
{
80000204:	eb cd 40 80 	pushm	r7,lr
80000208:	1a 97       	mov	r7,sp
	//Do initialization of I/O drivers
	ledInit();									//LEDs
8000020a:	f0 1f 00 18 	mcall	80000268 <ROSA_init+0x64>
	buttonInit();								//Buttons
8000020e:	f0 1f 00 18 	mcall	8000026c <ROSA_init+0x68>
	joystickInit();								//Joystick
80000212:	f0 1f 00 18 	mcall	80000270 <ROSA_init+0x6c>
	potInit();									//Potentiometer
80000216:	f0 1f 00 18 	mcall	80000274 <ROSA_init+0x70>
	usartInit(USART, &usart_options, FOSC0);	//Serial communication
8000021a:	e0 6a 1b 00 	mov	r10,6912
8000021e:	ea 1a 00 b7 	orh	r10,0xb7
80000222:	49 6b       	lddpc	r11,80000278 <ROSA_init+0x74>
80000224:	fe 7c 14 00 	mov	r12,-60416
80000228:	f0 1f 00 15 	mcall	8000027c <ROSA_init+0x78>
	TCBLIST=NULL;
8000022c:	49 58       	lddpc	r8,80000280 <ROSA_init+0x7c>
8000022e:	30 09       	mov	r9,0
80000230:	91 09       	st.w	r8[0x0],r9
	EXECTASK = NULL;
80000232:	49 58       	lddpc	r8,80000284 <ROSA_init+0x80>
80000234:	30 09       	mov	r9,0
80000236:	91 09       	st.w	r8[0x0],r9
	READY=NULL;
80000238:	49 48       	lddpc	r8,80000288 <ROSA_init+0x84>
8000023a:	30 09       	mov	r9,0
8000023c:	91 09       	st.w	r8[0x0],r9
	BLOCKED=NULL;
8000023e:	49 48       	lddpc	r8,8000028c <ROSA_init+0x88>
80000240:	30 09       	mov	r9,0
80000242:	91 09       	st.w	r8[0x0],r9
	WAITING=NULL;
80000244:	49 38       	lddpc	r8,80000290 <ROSA_init+0x8c>
80000246:	30 09       	mov	r9,0
80000248:	91 09       	st.w	r8[0x0],r9
	SUSPENDED=NULL;
8000024a:	49 38       	lddpc	r8,80000294 <ROSA_init+0x90>
8000024c:	30 09       	mov	r9,0
8000024e:	91 09       	st.w	r8[0x0],r9

	timerInit(TIMER_RESOLUTION);
80000250:	30 1c       	mov	r12,1
80000252:	f0 1f 00 12 	mcall	80000298 <ROSA_init+0x94>
	interruptInit();
80000256:	f0 1f 00 12 	mcall	8000029c <ROSA_init+0x98>
	timerStart();
8000025a:	f0 1f 00 12 	mcall	800002a0 <ROSA_init+0x9c>
	Create_Idle();
8000025e:	f0 1f 00 12 	mcall	800002a4 <ROSA_init+0xa0>
}
80000262:	e3 cd 80 80 	ldm	sp++,r7,pc
80000266:	00 00       	add	r0,r0
80000268:	80 00       	ld.sh	r0,r0[0x0]
8000026a:	10 10       	sub	r0,r8
8000026c:	80 00       	ld.sh	r0,r0[0x0]
8000026e:	0d ec       	ld.ub	r12,r6[0x6]
80000270:	80 00       	ld.sh	r0,r0[0x0]
80000272:	0e 3c       	cp.w	r12,r7
80000274:	80 00       	ld.sh	r0,r0[0x0]
80000276:	10 dc       	st.w	--r8,r12
80000278:	80 00       	ld.sh	r0,r0[0x0]
8000027a:	01 88       	ld.ub	r8,r0[0x0]
8000027c:	80 00       	ld.sh	r0,r0[0x0]
8000027e:	12 90       	mov	r0,r9
80000280:	00 00       	add	r0,r0
80000282:	05 bc       	ld.ub	r12,r2[0x3]
80000284:	00 00       	add	r0,r0
80000286:	05 c4       	ld.ub	r4,r2[0x4]
80000288:	00 00       	add	r0,r0
8000028a:	05 c0       	ld.ub	r0,r2[0x4]
8000028c:	00 00       	add	r0,r0
8000028e:	05 b8       	ld.ub	r8,r2[0x3]
80000290:	00 00       	add	r0,r0
80000292:	05 c8       	ld.ub	r8,r2[0x4]
80000294:	00 00       	add	r0,r0
80000296:	05 cc       	ld.ub	r12,r2[0x4]
80000298:	80 00       	ld.sh	r0,r0[0x0]
8000029a:	13 b4       	ld.ub	r4,r9[0x3]
8000029c:	80 00       	ld.sh	r0,r0[0x0]
8000029e:	1f 48       	ld.w	r8,--pc
800002a0:	80 00       	ld.sh	r0,r0[0x0]
800002a2:	13 e2       	ld.ub	r2,r9[0x6]
800002a4:	80 00       	ld.sh	r0,r0[0x0]
800002a6:	02 a8       	st.w	r1++,r8

800002a8 <Create_Idle>:
void Create_Idle(){
800002a8:	eb cd 40 80 	pushm	r7,lr
800002ac:	1a 97       	mov	r7,sp
800002ae:	20 2d       	sub	sp,8
	tcb *new_tcb = NULL;							// If task is IDLE
800002b0:	30 08       	mov	r8,0
800002b2:	ef 48 ff f8 	st.w	r7[-8],r8
	int *stackData=NULL;
800002b6:	30 08       	mov	r8,0
800002b8:	ef 48 ff fc 	st.w	r7[-4],r8
	new_tcb = (tcb*)malloc(sizeof(tcb));
800002bc:	37 cc       	mov	r12,124
800002be:	f0 1f 00 34 	mcall	8000038c <Create_Idle+0xe4>
800002c2:	18 98       	mov	r8,r12
800002c4:	ef 48 ff f8 	st.w	r7[-8],r8
	if(new_tcb==NULL)
800002c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800002cc:	58 08       	cp.w	r8,0
800002ce:	c5 b0       	breq	80000384 <Create_Idle+0xdc>
	return -1;
		
	stackData=malloc(IDLE_STACK_SIZE*sizeof(int));
800002d0:	e0 6c 01 00 	mov	r12,256
800002d4:	f0 1f 00 2e 	mcall	8000038c <Create_Idle+0xe4>
800002d8:	18 98       	mov	r8,r12
800002da:	ef 48 ff fc 	st.w	r7[-4],r8
	if (stackData==NULL){
800002de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800002e2:	58 08       	cp.w	r8,0
800002e4:	c0 61       	brne	800002f0 <Create_Idle+0x48>
		free(new_tcb);
800002e6:	ee fc ff f8 	ld.w	r12,r7[-8]
800002ea:	f0 1f 00 2a 	mcall	80000390 <Create_Idle+0xe8>
		return -1;
800002ee:	c4 c8       	rjmp	80000386 <Create_Idle+0xde>
	}
			
	new_tcb->HandleID = 0;																// Handle ID will be 0
800002f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800002f4:	30 09       	mov	r9,0
800002f6:	f1 49 00 78 	st.w	r8[120],r9
	TaskHandleID[0] = new_tcb;												     	// The task id/name created for debugging purposes
800002fa:	4a 78       	lddpc	r8,80000394 <Create_Idle+0xec>
800002fc:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000300:	91 09       	st.w	r8[0x0],r9
	new_tcb ->id[0] = "I";
80000302:	4a 68       	lddpc	r8,80000398 <Create_Idle+0xf0>
80000304:	5c 58       	castu.b	r8
80000306:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000030a:	b2 c8       	st.b	r9[0x4],r8
	
	new_tcb->priority = 0;														// The task priority
8000030c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000310:	30 09       	mov	r9,0
80000312:	f1 49 00 74 	st.w	r8[116],r9
				
	new_tcb->nexttcb = NULL;															// Don't link this TCB anywhere yet.
80000316:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000031a:	30 09       	mov	r9,0
8000031c:	91 09       	st.w	r8[0x0],r9
	new_tcb->staddr = *Idle_Task;														// start address
8000031e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000322:	49 f9       	lddpc	r9,8000039c <Create_Idle+0xf4>
80000324:	91 29       	st.w	r8[0x8],r9
				
	new_tcb->retaddr = (int)Idle_Task;												// return address it must be integer
80000326:	49 e9       	lddpc	r9,8000039c <Create_Idle+0xf4>
80000328:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000032c:	91 99       	st.w	r8[0x24],r9
	new_tcb->datasize = IDLE_STACK_SIZE;														// Size of stack
8000032e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000332:	34 09       	mov	r9,64
80000334:	91 49       	st.w	r8[0x10],r9
	new_tcb->dataarea = stackData + IDLE_STACK_SIZE ;										    // Stack data area
80000336:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000033a:	f0 c9 ff 00 	sub	r9,r8,-256
8000033e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000342:	91 39       	st.w	r8[0xc],r9
				
	new_tcb->saveusp = new_tcb -> dataarea;												// Current stack position
80000344:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000348:	70 39       	ld.w	r9,r8[0xc]
8000034a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000034e:	91 59       	st.w	r8[0x14],r9
	new_tcb->savesr = ROSA_INITIALSR;
80000350:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000354:	fc 19 00 1c 	movh	r9,0x1c
80000358:	91 89       	st.w	r8[0x20],r9
	new_tcb->waitSemaphore=0;
8000035a:	ee fa ff f8 	ld.w	r10,r7[-8]
8000035e:	30 08       	mov	r8,0
80000360:	30 09       	mov	r9,0
80000362:	f4 e9 00 6c 	st.d	r10[108],r8
	new_tcb->waitUntil=0;
80000366:	ee fa ff f8 	ld.w	r10,r7[-8]
8000036a:	30 08       	mov	r8,0
8000036c:	30 09       	mov	r9,0
8000036e:	f4 e9 00 64 	st.d	r10[100],r8
	contextInit(new_tcb);																// Initialize context.
80000372:	ee fc ff f8 	ld.w	r12,r7[-8]
80000376:	f0 1f 00 0b 	mcall	800003a0 <Create_Idle+0xf8>
	Insert_Ready(new_tcb);																// store task to the ready queue
8000037a:	ee fc ff f8 	ld.w	r12,r7[-8]
8000037e:	f0 1f 00 0a 	mcall	800003a4 <Create_Idle+0xfc>
80000382:	c0 28       	rjmp	80000386 <Create_Idle+0xde>
void Create_Idle(){
	tcb *new_tcb = NULL;							// If task is IDLE
	int *stackData=NULL;
	new_tcb = (tcb*)malloc(sizeof(tcb));
	if(new_tcb==NULL)
	return -1;
80000384:	d7 03       	nop
	new_tcb->savesr = ROSA_INITIALSR;
	new_tcb->waitSemaphore=0;
	new_tcb->waitUntil=0;
	contextInit(new_tcb);																// Initialize context.
	Insert_Ready(new_tcb);																// store task to the ready queue
}
80000386:	2f ed       	sub	sp,-8
80000388:	e3 cd 80 80 	ldm	sp++,r7,pc
8000038c:	80 00       	ld.sh	r0,r0[0x0]
8000038e:	15 04       	ld.w	r4,r10++
80000390:	80 00       	ld.sh	r0,r0[0x0]
80000392:	14 ec       	st.h	--r10,r12
80000394:	00 00       	add	r0,r0
80000396:	05 1c       	ld.sh	r12,r2++
80000398:	80 00       	ld.sh	r0,r0[0x0]
8000039a:	01 94       	ld.ub	r4,r0[0x1]
8000039c:	80 00       	ld.sh	r0,r0[0x0]
8000039e:	01 98       	ld.ub	r8,r0[0x1]
800003a0:	80 00       	ld.sh	r0,r0[0x0]
800003a2:	07 7e       	ld.ub	lr,--r3
800003a4:	80 00       	ld.sh	r0,r0[0x0]
800003a6:	09 34       	ld.ub	r4,r4++

800003a8 <ROSA_TaskCreate>:
}
bool ROSA_TaskResume(int HandleId){
	Resume_Suspended(HandleId);
	return true;
}
int ROSA_TaskCreate (char ID[NAMESIZE], void *functionPtr, int stackSize, int priority){
800003a8:	eb cd 40 80 	pushm	r7,lr
800003ac:	1a 97       	mov	r7,sp
800003ae:	20 8d       	sub	sp,32
800003b0:	ef 4c ff ec 	st.w	r7[-20],r12
800003b4:	ef 4b ff e8 	st.w	r7[-24],r11
800003b8:	ef 4a ff e4 	st.w	r7[-28],r10
800003bc:	ef 49 ff e0 	st.w	r7[-32],r9
	int i, j=1;
800003c0:	30 18       	mov	r8,1
800003c2:	ef 48 ff f4 	st.w	r7[-12],r8
	tcb *new_tcb = NULL;
800003c6:	30 08       	mov	r8,0
800003c8:	ef 48 ff f8 	st.w	r7[-8],r8
	int *stackData=NULL;
800003cc:	30 08       	mov	r8,0
800003ce:	ef 48 ff fc 	st.w	r7[-4],r8
	
	if(priority <= 0 || priority > 20 )	//if invalid prio, exit
800003d2:	ee f8 ff e0 	ld.w	r8,r7[-32]
800003d6:	58 08       	cp.w	r8,0
800003d8:	e0 8a 00 07 	brle	800003e6 <ROSA_TaskCreate+0x3e>
800003dc:	ee f8 ff e0 	ld.w	r8,r7[-32]
800003e0:	59 48       	cp.w	r8,20
800003e2:	e0 8a 00 04 	brle	800003ea <ROSA_TaskCreate+0x42>
		return -1;
800003e6:	3f f8       	mov	r8,-1
800003e8:	ca d8       	rjmp	80000542 <ROSA_TaskCreate+0x19a>
		
	if(stackSize<=0)
800003ea:	ee f8 ff e4 	ld.w	r8,r7[-28]
800003ee:	58 08       	cp.w	r8,0
800003f0:	e0 89 00 04 	brgt	800003f8 <ROSA_TaskCreate+0x50>
		return -1;
800003f4:	3f f8       	mov	r8,-1
800003f6:	ca 68       	rjmp	80000542 <ROSA_TaskCreate+0x19a>
							
	new_tcb = (tcb*)malloc(sizeof(tcb));
800003f8:	37 cc       	mov	r12,124
800003fa:	f0 1f 00 55 	mcall	8000054c <ROSA_TaskCreate+0x1a4>
800003fe:	18 98       	mov	r8,r12
80000400:	ef 48 ff f8 	st.w	r7[-8],r8
	if(new_tcb==NULL)
80000404:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000408:	58 08       	cp.w	r8,0
8000040a:	c0 31       	brne	80000410 <ROSA_TaskCreate+0x68>
		return -1;
8000040c:	3f f8       	mov	r8,-1
8000040e:	c9 a8       	rjmp	80000542 <ROSA_TaskCreate+0x19a>
	
	stackData = malloc(stackSize*sizeof(int));
80000410:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000414:	a3 68       	lsl	r8,0x2
80000416:	10 9c       	mov	r12,r8
80000418:	f0 1f 00 4d 	mcall	8000054c <ROSA_TaskCreate+0x1a4>
8000041c:	18 98       	mov	r8,r12
8000041e:	ef 48 ff fc 	st.w	r7[-4],r8
	if(stackData==NULL){
80000422:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000426:	58 08       	cp.w	r8,0
80000428:	c0 71       	brne	80000436 <ROSA_TaskCreate+0x8e>
		free(new_tcb);
8000042a:	ee fc ff f8 	ld.w	r12,r7[-8]
8000042e:	f0 1f 00 49 	mcall	80000550 <ROSA_TaskCreate+0x1a8>
		return -1;
80000432:	3f f8       	mov	r8,-1
80000434:	c8 78       	rjmp	80000542 <ROSA_TaskCreate+0x19a>
	}
	for (i=0; i < NAMESIZE; i++){												     	// The task id/name created for debugging purposes
80000436:	30 08       	mov	r8,0
80000438:	ef 48 ff f0 	st.w	r7[-16],r8
8000043c:	c1 48       	rjmp	80000464 <ROSA_TaskCreate+0xbc>
		new_tcb ->id[i] = ID[i];
8000043e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000442:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000446:	ee fa ff ec 	ld.w	r10,r7[-20]
8000044a:	f4 08 00 08 	add	r8,r10,r8
8000044e:	11 88       	ld.ub	r8,r8[0x0]
80000450:	ee fa ff f8 	ld.w	r10,r7[-8]
80000454:	f4 09 00 09 	add	r9,r10,r9
80000458:	b2 c8       	st.b	r9[0x4],r8
	stackData = malloc(stackSize*sizeof(int));
	if(stackData==NULL){
		free(new_tcb);
		return -1;
	}
	for (i=0; i < NAMESIZE; i++){												     	// The task id/name created for debugging purposes
8000045a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000045e:	2f f8       	sub	r8,-1
80000460:	ef 48 ff f0 	st.w	r7[-16],r8
80000464:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000468:	58 38       	cp.w	r8,3
8000046a:	fe 9a ff ea 	brle	8000043e <ROSA_TaskCreate+0x96>
		new_tcb ->id[i] = ID[i];
	}
	new_tcb->priority = priority;														// The task priority
8000046e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000472:	ee f9 ff e0 	ld.w	r9,r7[-32]
80000476:	f1 49 00 74 	st.w	r8[116],r9
		
	new_tcb->nexttcb = NULL;															// Don't link this TCB anywhere yet.
8000047a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000047e:	30 09       	mov	r9,0
80000480:	91 09       	st.w	r8[0x0],r9
	new_tcb->staddr = functionPtr;														// start address
80000482:	ee f9 ff e8 	ld.w	r9,r7[-24]
80000486:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000048a:	91 29       	st.w	r8[0x8],r9
		
	new_tcb->retaddr = (int)functionPtr;												// return address it must be integer
8000048c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80000490:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000494:	91 99       	st.w	r8[0x24],r9
	new_tcb->datasize = stackSize;														// Size of stack
80000496:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000049a:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000049e:	91 49       	st.w	r8[0x10],r9
	new_tcb->dataarea = stackData + stackSize ;										    // Stack data area
800004a0:	ee f8 ff e4 	ld.w	r8,r7[-28]
800004a4:	a3 68       	lsl	r8,0x2
800004a6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800004aa:	10 09       	add	r9,r8
800004ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004b0:	91 39       	st.w	r8[0xc],r9
		
	new_tcb->saveusp = new_tcb -> dataarea;												// Current stack position
800004b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004b6:	70 39       	ld.w	r9,r8[0xc]
800004b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004bc:	91 59       	st.w	r8[0x14],r9
	new_tcb->savesr = ROSA_INITIALSR;
800004be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004c2:	fc 19 00 1c 	movh	r9,0x1c
800004c6:	91 89       	st.w	r8[0x20],r9
	new_tcb->waitSemaphore=0;
800004c8:	ee fa ff f8 	ld.w	r10,r7[-8]
800004cc:	30 08       	mov	r8,0
800004ce:	30 09       	mov	r9,0
800004d0:	f4 e9 00 6c 	st.d	r10[108],r8
	new_tcb->waitUntil=0;
800004d4:	ee fa ff f8 	ld.w	r10,r7[-8]
800004d8:	30 08       	mov	r8,0
800004da:	30 09       	mov	r9,0
800004dc:	f4 e9 00 64 	st.d	r10[100],r8
		
	while (j < MAX_NR_TASK){																	// Check if some array's field is empty or not
800004e0:	c1 b8       	rjmp	80000516 <ROSA_TaskCreate+0x16e>
		if (TaskHandleID[j]==NULL){
800004e2:	ee f9 ff f4 	ld.w	r9,r7[-12]
800004e6:	49 c8       	lddpc	r8,80000554 <ROSA_TaskCreate+0x1ac>
800004e8:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800004ec:	58 08       	cp.w	r8,0
800004ee:	c0 f1       	brne	8000050c <ROSA_TaskCreate+0x164>
			new_tcb->HandleID = j;
800004f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800004f4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800004f8:	f1 49 00 78 	st.w	r8[120],r9
			TaskHandleID[j] = new_tcb;
800004fc:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000500:	49 58       	lddpc	r8,80000554 <ROSA_TaskCreate+0x1ac>
80000502:	ee fa ff f8 	ld.w	r10,r7[-8]
80000506:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			break;
8000050a:	c0 b8       	rjmp	80000520 <ROSA_TaskCreate+0x178>
		}
		else
		j++;
8000050c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000510:	2f f8       	sub	r8,-1
80000512:	ef 48 ff f4 	st.w	r7[-12],r8
	new_tcb->saveusp = new_tcb -> dataarea;												// Current stack position
	new_tcb->savesr = ROSA_INITIALSR;
	new_tcb->waitSemaphore=0;
	new_tcb->waitUntil=0;
		
	while (j < MAX_NR_TASK){																	// Check if some array's field is empty or not
80000516:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000051a:	59 48       	cp.w	r8,20
8000051c:	fe 9a ff e3 	brle	800004e2 <ROSA_TaskCreate+0x13a>
			break;
		}
		else
		j++;
	}
	if(j==MAX_NR_TASK)
80000520:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000524:	59 58       	cp.w	r8,21
80000526:	c0 31       	brne	8000052c <ROSA_TaskCreate+0x184>
	return -1;
80000528:	3f f8       	mov	r8,-1
8000052a:	c0 c8       	rjmp	80000542 <ROSA_TaskCreate+0x19a>
	
	contextInit(new_tcb);																	// Initialize context.
8000052c:	ee fc ff f8 	ld.w	r12,r7[-8]
80000530:	f0 1f 00 0a 	mcall	80000558 <ROSA_TaskCreate+0x1b0>
	Insert_Ready(new_tcb);																	// store task to the ready queue
80000534:	ee fc ff f8 	ld.w	r12,r7[-8]
80000538:	f0 1f 00 09 	mcall	8000055c <ROSA_TaskCreate+0x1b4>
	return new_tcb->HandleID;	
8000053c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000540:	71 e8       	ld.w	r8,r8[0x78]
}
80000542:	10 9c       	mov	r12,r8
80000544:	2f 8d       	sub	sp,-32
80000546:	e3 cd 80 80 	ldm	sp++,r7,pc
8000054a:	00 00       	add	r0,r0
8000054c:	80 00       	ld.sh	r0,r0[0x0]
8000054e:	15 04       	ld.w	r4,r10++
80000550:	80 00       	ld.sh	r0,r0[0x0]
80000552:	14 ec       	st.h	--r10,r12
80000554:	00 00       	add	r0,r0
80000556:	05 1c       	ld.sh	r12,r2++
80000558:	80 00       	ld.sh	r0,r0[0x0]
8000055a:	07 7e       	ld.ub	lr,--r3
8000055c:	80 00       	ld.sh	r0,r0[0x0]
8000055e:	09 34       	ld.ub	r4,r4++

80000560 <ROSA_TaskDelete>:

bool ROSA_TaskDelete(int HandleId){	
80000560:	eb cd 40 80 	pushm	r7,lr
80000564:	1a 97       	mov	r7,sp
80000566:	20 1d       	sub	sp,4
80000568:	ef 4c ff fc 	st.w	r7[-4],r12
	if(HandleId<1 || HandleId>20)
8000056c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000570:	58 08       	cp.w	r8,0
80000572:	e0 8a 00 07 	brle	80000580 <ROSA_TaskDelete+0x20>
80000576:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000057a:	59 48       	cp.w	r8,20
8000057c:	e0 8a 00 04 	brle	80000584 <ROSA_TaskDelete+0x24>
	return false;	
80000580:	30 08       	mov	r8,0
80000582:	c6 28       	rjmp	80000646 <ROSA_TaskDelete+0xe6>
	
	if(TaskHandleID[HandleId]==NULL)
80000584:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000588:	4b 28       	lddpc	r8,80000650 <ROSA_TaskDelete+0xf0>
8000058a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000058e:	58 08       	cp.w	r8,0
80000590:	c0 31       	brne	80000596 <ROSA_TaskDelete+0x36>
	return true;
80000592:	30 18       	mov	r8,1
80000594:	c5 98       	rjmp	80000646 <ROSA_TaskDelete+0xe6>
	
	// If executing task tries to delete itself
	if (EXECTASK->HandleID == HandleId ){
80000596:	4b 08       	lddpc	r8,80000654 <ROSA_TaskDelete+0xf4>
80000598:	70 08       	ld.w	r8,r8[0x0]
8000059a:	71 e9       	ld.w	r9,r8[0x78]
8000059c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800005a0:	10 39       	cp.w	r9,r8
800005a2:	c2 11       	brne	800005e4 <ROSA_TaskDelete+0x84>
		interruptDisable();
800005a4:	f0 1f 00 2d 	mcall	80000658 <ROSA_TaskDelete+0xf8>
		TaskHandleID[HandleId] = NULL;				// free space in array handle ID
800005a8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800005ac:	4a 98       	lddpc	r8,80000650 <ROSA_TaskDelete+0xf0>
800005ae:	30 0a       	mov	r10,0
800005b0:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		free(EXECTASK->dataarea-EXECTASK->datasize);				    // deallocate stack
800005b4:	4a 88       	lddpc	r8,80000654 <ROSA_TaskDelete+0xf4>
800005b6:	70 08       	ld.w	r8,r8[0x0]
800005b8:	70 39       	ld.w	r9,r8[0xc]
800005ba:	4a 78       	lddpc	r8,80000654 <ROSA_TaskDelete+0xf4>
800005bc:	70 08       	ld.w	r8,r8[0x0]
800005be:	70 48       	ld.w	r8,r8[0x10]
800005c0:	a3 68       	lsl	r8,0x2
800005c2:	5c 38       	neg	r8
800005c4:	f2 08 00 08 	add	r8,r9,r8
800005c8:	10 9c       	mov	r12,r8
800005ca:	f0 1f 00 25 	mcall	8000065c <ROSA_TaskDelete+0xfc>
		free(EXECTASK);								// deallocate task structure
800005ce:	4a 28       	lddpc	r8,80000654 <ROSA_TaskDelete+0xf4>
800005d0:	70 08       	ld.w	r8,r8[0x0]
800005d2:	10 9c       	mov	r12,r8
800005d4:	f0 1f 00 22 	mcall	8000065c <ROSA_TaskDelete+0xfc>
		interruptEnable();
800005d8:	f0 1f 00 22 	mcall	80000660 <ROSA_TaskDelete+0x100>
		ROSA_yield();								// it takes next task from ready queue
800005dc:	f0 1f 00 22 	mcall	80000664 <ROSA_TaskDelete+0x104>
		return true;
800005e0:	30 18       	mov	r8,1
800005e2:	c3 28       	rjmp	80000646 <ROSA_TaskDelete+0xe6>
	}
	if(Search_Queue(WAITING, HandleId))
800005e4:	4a 18       	lddpc	r8,80000668 <ROSA_TaskDelete+0x108>
800005e6:	70 08       	ld.w	r8,r8[0x0]
800005e8:	ee fb ff fc 	ld.w	r11,r7[-4]
800005ec:	10 9c       	mov	r12,r8
800005ee:	f0 1f 00 20 	mcall	8000066c <ROSA_TaskDelete+0x10c>
800005f2:	18 98       	mov	r8,r12
800005f4:	58 08       	cp.w	r8,0
800005f6:	c0 30       	breq	800005fc <ROSA_TaskDelete+0x9c>
		return true;
800005f8:	30 18       	mov	r8,1
800005fa:	c2 68       	rjmp	80000646 <ROSA_TaskDelete+0xe6>
	if(Search_Queue(READY, HandleId))
800005fc:	49 d8       	lddpc	r8,80000670 <ROSA_TaskDelete+0x110>
800005fe:	70 08       	ld.w	r8,r8[0x0]
80000600:	ee fb ff fc 	ld.w	r11,r7[-4]
80000604:	10 9c       	mov	r12,r8
80000606:	f0 1f 00 1a 	mcall	8000066c <ROSA_TaskDelete+0x10c>
8000060a:	18 98       	mov	r8,r12
8000060c:	58 08       	cp.w	r8,0
8000060e:	c0 30       	breq	80000614 <ROSA_TaskDelete+0xb4>
		return true;
80000610:	30 18       	mov	r8,1
80000612:	c1 a8       	rjmp	80000646 <ROSA_TaskDelete+0xe6>
	if(Search_Queue(BLOCKED, HandleId))
80000614:	49 88       	lddpc	r8,80000674 <ROSA_TaskDelete+0x114>
80000616:	70 08       	ld.w	r8,r8[0x0]
80000618:	ee fb ff fc 	ld.w	r11,r7[-4]
8000061c:	10 9c       	mov	r12,r8
8000061e:	f0 1f 00 14 	mcall	8000066c <ROSA_TaskDelete+0x10c>
80000622:	18 98       	mov	r8,r12
80000624:	58 08       	cp.w	r8,0
80000626:	c0 30       	breq	8000062c <ROSA_TaskDelete+0xcc>
		return true;
80000628:	30 18       	mov	r8,1
8000062a:	c0 e8       	rjmp	80000646 <ROSA_TaskDelete+0xe6>
	if(Search_Queue(SUSPENDED, HandleId))
8000062c:	49 38       	lddpc	r8,80000678 <ROSA_TaskDelete+0x118>
8000062e:	70 08       	ld.w	r8,r8[0x0]
80000630:	ee fb ff fc 	ld.w	r11,r7[-4]
80000634:	10 9c       	mov	r12,r8
80000636:	f0 1f 00 0e 	mcall	8000066c <ROSA_TaskDelete+0x10c>
8000063a:	18 98       	mov	r8,r12
8000063c:	58 08       	cp.w	r8,0
8000063e:	c0 30       	breq	80000644 <ROSA_TaskDelete+0xe4>
		return true;
80000640:	30 18       	mov	r8,1
80000642:	c0 28       	rjmp	80000646 <ROSA_TaskDelete+0xe6>
80000644:	c0 18       	rjmp	80000646 <ROSA_TaskDelete+0xe6>

}
80000646:	10 9c       	mov	r12,r8
80000648:	2f fd       	sub	sp,-4
8000064a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000064e:	00 00       	add	r0,r0
80000650:	00 00       	add	r0,r0
80000652:	05 1c       	ld.sh	r12,r2++
80000654:	00 00       	add	r0,r0
80000656:	05 c4       	ld.ub	r4,r2[0x4]
80000658:	80 00       	ld.sh	r0,r0[0x0]
8000065a:	1f 66       	ld.uh	r6,--pc
8000065c:	80 00       	ld.sh	r0,r0[0x0]
8000065e:	14 ec       	st.h	--r10,r12
80000660:	80 00       	ld.sh	r0,r0[0x0]
80000662:	1f 6a       	ld.uh	r10,--pc
80000664:	80 00       	ld.sh	r0,r0[0x0]
80000666:	08 0a       	add	r10,r4
80000668:	00 00       	add	r0,r0
8000066a:	05 c8       	ld.ub	r8,r2[0x4]
8000066c:	80 00       	ld.sh	r0,r0[0x0]
8000066e:	06 7c       	tst	r12,r3
80000670:	00 00       	add	r0,r0
80000672:	05 c0       	ld.ub	r0,r2[0x4]
80000674:	00 00       	add	r0,r0
80000676:	05 b8       	ld.ub	r8,r2[0x3]
80000678:	00 00       	add	r0,r0
8000067a:	05 cc       	ld.ub	r12,r2[0x4]

8000067c <Search_Queue>:

bool Search_Queue(tcb *Queue,int HandleId){
8000067c:	eb cd 40 80 	pushm	r7,lr
80000680:	1a 97       	mov	r7,sp
80000682:	20 4d       	sub	sp,16
80000684:	ef 4c ff f4 	st.w	r7[-12],r12
80000688:	ef 4b ff f0 	st.w	r7[-16],r11
	tcb *PREVIOUS, *TEMP;
	TEMP = Queue;
8000068c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000690:	ef 48 ff fc 	st.w	r7[-4],r8
	PREVIOUS = Queue;
80000694:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000698:	ef 48 ff f8 	st.w	r7[-8],r8
	if(TEMP!=NULL && TEMP->HandleID==HandleId){
8000069c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006a0:	58 08       	cp.w	r8,0
800006a2:	c4 20       	breq	80000726 <Search_Queue+0xaa>
800006a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006a8:	71 e9       	ld.w	r9,r8[0x78]
800006aa:	ee f8 ff f0 	ld.w	r8,r7[-16]
800006ae:	10 39       	cp.w	r9,r8
800006b0:	c3 b1       	brne	80000726 <Search_Queue+0xaa>
		Queue=TEMP->nexttcb;
800006b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006b6:	70 08       	ld.w	r8,r8[0x0]
800006b8:	ef 48 ff f4 	st.w	r7[-12],r8
 		//TaskHandleID[HandleId] = NULL;
 		//free(EXECTASK->dataarea-EXECTASK->datasize);
 		//free(TEMP);
		return true;
800006bc:	30 18       	mov	r8,1
800006be:	c3 98       	rjmp	80000730 <Search_Queue+0xb4>
	}
	while (TEMP != NULL ){
		if (TEMP->HandleID == HandleId){
800006c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006c4:	71 e9       	ld.w	r9,r8[0x78]
800006c6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800006ca:	10 39       	cp.w	r9,r8
800006cc:	c2 41       	brne	80000714 <Search_Queue+0x98>
			PREVIOUS->nexttcb = TEMP->nexttcb;   // OK
800006ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006d2:	70 09       	ld.w	r9,r8[0x0]
800006d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800006d8:	91 09       	st.w	r8[0x0],r9
			interruptDisable();
800006da:	f0 1f 00 18 	mcall	80000738 <Search_Queue+0xbc>
			TaskHandleID[HandleId] = NULL;
800006de:	ee f9 ff f0 	ld.w	r9,r7[-16]
800006e2:	49 78       	lddpc	r8,8000073c <Search_Queue+0xc0>
800006e4:	30 0a       	mov	r10,0
800006e6:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			free(TEMP->dataarea-TEMP->datasize);	
800006ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006ee:	70 39       	ld.w	r9,r8[0xc]
800006f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006f4:	70 48       	ld.w	r8,r8[0x10]
800006f6:	a3 68       	lsl	r8,0x2
800006f8:	5c 38       	neg	r8
800006fa:	f2 08 00 08 	add	r8,r9,r8
800006fe:	10 9c       	mov	r12,r8
80000700:	f0 1f 00 10 	mcall	80000740 <Search_Queue+0xc4>
			free(TEMP);
80000704:	ee fc ff fc 	ld.w	r12,r7[-4]
80000708:	f0 1f 00 0e 	mcall	80000740 <Search_Queue+0xc4>
			interruptEnable();
8000070c:	f0 1f 00 0e 	mcall	80000744 <Search_Queue+0xc8>
			return true;
80000710:	30 18       	mov	r8,1
80000712:	c0 f8       	rjmp	80000730 <Search_Queue+0xb4>
		}
		PREVIOUS = TEMP;
80000714:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000718:	ef 48 ff f8 	st.w	r7[-8],r8
		TEMP = TEMP->nexttcb;
8000071c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000720:	70 08       	ld.w	r8,r8[0x0]
80000722:	ef 48 ff fc 	st.w	r7[-4],r8
 		//TaskHandleID[HandleId] = NULL;
 		//free(EXECTASK->dataarea-EXECTASK->datasize);
 		//free(TEMP);
		return true;
	}
	while (TEMP != NULL ){
80000726:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000072a:	58 08       	cp.w	r8,0
8000072c:	cc a1       	brne	800006c0 <Search_Queue+0x44>
			return true;
		}
		PREVIOUS = TEMP;
		TEMP = TEMP->nexttcb;
	}
	return false;
8000072e:	30 08       	mov	r8,0
}
80000730:	10 9c       	mov	r12,r8
80000732:	2f cd       	sub	sp,-16
80000734:	e3 cd 80 80 	ldm	sp++,r7,pc
80000738:	80 00       	ld.sh	r0,r0[0x0]
8000073a:	1f 66       	ld.uh	r6,--pc
8000073c:	00 00       	add	r0,r0
8000073e:	05 1c       	ld.sh	r12,r2++
80000740:	80 00       	ld.sh	r0,r0[0x0]
80000742:	14 ec       	st.h	--r10,r12
80000744:	80 00       	ld.sh	r0,r0[0x0]
80000746:	1f 6a       	ld.uh	r10,--pc

80000748 <ROSA_start>:
* the TCBLIST.
*
*********************************************************/
ROSA_start:
	//Put the first task from TCBLIST into EXECTASK
	lda.w r12,TCBLIST
80000748:	4b 5c       	lddpc	r12,8000081c <_yield+0xa>
	lda.w r11,EXECTASK
8000074a:	4b 6b       	lddpc	r11,80000820 <_yield+0xe>
	ld.w r12,r12[0x0]
8000074c:	78 0c       	ld.w	r12,r12[0x0]
	st.w r11[0x0],r12
8000074e:	97 0c       	st.w	r11[0x0],r12

	//Set up start USP
	ld.w r0,r12[TCB.SAVEUSP]
80000750:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
80000752:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
80000754:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++
80000758:	1b 00       	ld.w	r0,sp++

	//Load start lr, execution will jump here later
	ld.w lr,r12[TCB.STADDR]
8000075a:	78 2e       	ld.w	lr,r12[0x8]

	//Set up start SR, enter user mode
	ld.w r0,r12[TCB.SAVESR]
8000075c:	78 80       	ld.w	r0,r12[0x20]
	mtsr 0x0,r0
8000075e:	e3 b0 00 00 	mtsr	0x0,r0

	//Load start registers
	ld.w r0,r12[TCB.SAVEREG.R0]
80000762:	79 80       	ld.w	r0,r12[0x60]
	ld.w r1,r12[TCB.SAVEREG.R1]
80000764:	79 71       	ld.w	r1,r12[0x5c]
	ld.w r2,r12[TCB.SAVEREG.R2]
80000766:	79 62       	ld.w	r2,r12[0x58]
	ld.w r3,r12[TCB.SAVEREG.R3]
80000768:	79 53       	ld.w	r3,r12[0x54]
	ld.w r4,r12[TCB.SAVEREG.R4]
8000076a:	79 44       	ld.w	r4,r12[0x50]
	ld.w r5,r12[TCB.SAVEREG.R5]
8000076c:	79 35       	ld.w	r5,r12[0x4c]
	ld.w r6,r12[TCB.SAVEREG.R6]
8000076e:	79 26       	ld.w	r6,r12[0x48]
	ld.w r7,r12[TCB.SAVEREG.R7]
80000770:	79 17       	ld.w	r7,r12[0x44]
	ld.w r8,r12[TCB.SAVEREG.R8]
80000772:	79 08       	ld.w	r8,r12[0x40]
	ld.w r9,r12[TCB.SAVEREG.R9]
80000774:	78 f9       	ld.w	r9,r12[0x3c]
	ld.w r10,r12[TCB.SAVEREG.R10]
80000776:	78 ea       	ld.w	r10,r12[0x38]
	ld.w r11,r12[TCB.SAVEREG.R11]
80000778:	78 db       	ld.w	r11,r12[0x34]
	ld.w r12,r12[TCB.SAVEREG.R12]
8000077a:	78 cc       	ld.w	r12,r12[0x30]

	mov pc,lr
8000077c:	1c 9f       	mov	pc,lr

8000077e <contextInit>:
 * from supervisor mode.
 *
 ********************************************************/
contextInit:
	//Initialize lr in the savereg area
	ld.w r0,r12[TCB.STADDR]
8000077e:	78 20       	ld.w	r0,r12[0x8]
	st.w r12[TCB.SAVEREG.LR],r0
80000780:	99 a0       	st.w	r12[0x28],r0
	//~ call timerStart
	//~ call interruptEnable
	//~ popm lr

	//Initialize regs to zero
	mov r0,0x0
80000782:	30 00       	mov	r0,0
	st.w r12[TCB.SAVEREG.R0],r0
80000784:	f9 40 00 60 	st.w	r12[96],r0
	st.w r12[TCB.SAVEREG.R1],r0
80000788:	f9 40 00 5c 	st.w	r12[92],r0
	st.w r12[TCB.SAVEREG.R2],r0
8000078c:	f9 40 00 58 	st.w	r12[88],r0
	st.w r12[TCB.SAVEREG.R3],r0
80000790:	f9 40 00 54 	st.w	r12[84],r0
	st.w r12[TCB.SAVEREG.R4],r0
80000794:	f9 40 00 50 	st.w	r12[80],r0
	st.w r12[TCB.SAVEREG.R5],r0
80000798:	f9 40 00 4c 	st.w	r12[76],r0
	st.w r12[TCB.SAVEREG.R6],r0
8000079c:	f9 40 00 48 	st.w	r12[72],r0
	st.w r12[TCB.SAVEREG.R7],r0
800007a0:	f9 40 00 44 	st.w	r12[68],r0
	st.w r12[TCB.SAVEREG.R8],r0
800007a4:	f9 40 00 40 	st.w	r12[64],r0
	st.w r12[TCB.SAVEREG.R9],r0
800007a8:	99 f0       	st.w	r12[0x3c],r0
	st.w r12[TCB.SAVEREG.R10],r0
800007aa:	99 e0       	st.w	r12[0x38],r0
	st.w r12[TCB.SAVEREG.R11],r0
800007ac:	99 d0       	st.w	r12[0x34],r0
	st.w r12[TCB.SAVEREG.R12],r0
800007ae:	99 c0       	st.w	r12[0x30],r0
	mov pc,lr
800007b0:	1c 9f       	mov	pc,lr

800007b2 <contextSave>:
* Task switch routine. This routine save task context.
* Context of the TCB referenced by EXECTASK will be saved.
*
*********************************************************/
contextSave:
	pushm r12
800007b2:	d2 01       	pushm	r12
	//Fetch the current executing task
	lda.w r12,EXECTASK
800007b4:	49 bc       	lddpc	r12,80000820 <_yield+0xe>
	ld.w r12,r12[0x0]
800007b6:	78 0c       	ld.w	r12,r12[0x0]

	//Save work registers to TCB
	st.w r12[TCB.SAVER0],r0
800007b8:	99 60       	st.w	r12[0x18],r0
	st.w r12[TCB.SAVER1],r1
800007ba:	99 71       	st.w	r12[0x1c],r1
	ld.w r0,sp++					//Use r0 to save r12
800007bc:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEREG.R12],r0
800007be:	99 c0       	st.w	r12[0x30],r0

	//Save task SR to TCB
	ld.w r0,sp[SF_SR]
800007c0:	7a 00       	ld.w	r0,sp[0x0]
	st.w r12[TCB.SAVESR],r0
800007c2:	99 80       	st.w	r12[0x20],r0

	//Save task registers r0-r11 to TCB
	mov r0,TCB.SAVEREG.R11
800007c4:	33 40       	mov	r0,52
	add r0,r12
800007c6:	18 00       	add	r0,r12
	stmts r0,r0-r11
800007c8:	ed c0 0f ff 	stmts	r0,r0-r11

	//Get the address of the USP
	mov r0,sp
800007cc:	1a 90       	mov	r0,sp
	st.w --sp,r0
800007ce:	1a d0       	st.w	--sp,r0
	stmts sp,sp
800007d0:	ed cd 20 00 	stmts	sp,sp
	ld.w r1,sp++					//USP in r1
800007d4:	1b 01       	ld.w	r1,sp++

	//Save RETADDR to TCB
	ld.w r0,r1[SF_LR_TASK]			//Get lr from user stack, we want to return to task, not to contextSwitch
800007d6:	62 00       	ld.w	r0,r1[0x0]
	st.w r12[TCB.RETADDR],r0		//correction of stack is done later
800007d8:	99 90       	st.w	r12[0x24],r0

	//Save LR_task
	st.w r12[TCB.SAVEREG.LR],r0
800007da:	99 a0       	st.w	r12[0x28],r0

	//Correct the USP for the ROSA_yield() call.
	//This is done since we do not want to return to ROSA_yield(),
	//where the stack frame is currently at, but to the executing task.
	sub r1,-0x04
800007dc:	2f c1       	sub	r1,-4

	//Save USP
	st.w r12[TCB.SAVEUSP],r1
800007de:	99 51       	st.w	r12[0x14],r1

	mov pc,lr
800007e0:	1c 9f       	mov	pc,lr

800007e2 <contextRestore>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestore:
	//Fetch the current executing task
	lda.w r12,EXECTASK
800007e2:	49 0c       	lddpc	r12,80000820 <_yield+0xe>
	ld.w r12,r12[0x0]
800007e4:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r1,r12[TCB.SAVEUSP]
800007e6:	78 51       	ld.w	r1,r12[0x14]
	st.w --sp,r1
800007e8:	1a d1       	st.w	--sp,r1
	ldmts sp,sp
800007ea:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r1,sp++
800007ee:	1b 01       	ld.w	r1,sp++

	//Restore LR = retaddr
	ld.w lr,r12[TCB.SAVEREG.LR]
800007f0:	78 ae       	ld.w	lr,r12[0x28]

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
800007f2:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SF_PC],r0
800007f4:	9b 10       	st.w	sp[0x4],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
800007f6:	33 40       	mov	r0,52
	add r0,r12
800007f8:	18 00       	add	r0,r12
	ldmts r0,r0-r11
800007fa:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
800007fe:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SF_SR],r0			//Put SR on the stack for later fetch
80000800:	9b 00       	st.w	sp[0x0],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
80000802:	78 60       	ld.w	r0,r12[0x18]
	ld.w r1,r12[TCB.SAVER1]
80000804:	78 71       	ld.w	r1,r12[0x1c]
	ld.w r12,r12[TCB.SAVEREG.R12]
80000806:	78 cc       	ld.w	r12,r12[0x30]

	//We are done, exit from supervisor mode
	rets
80000808:	d6 13       	rets

8000080a <ROSA_yield>:
* 	transfer control to supervisor mode
* 	They are used for context switching.
*
*********************************************************/
ROSA_yield:
	pushm lr
8000080a:	d4 01       	pushm	lr
	lda.w lr,_yield
8000080c:	fe ce ff fa 	sub	lr,pc,-6
	//Enter supervisor mode
	scall
80000810:	d7 33       	scall

80000812 <_yield>:
_yield:
	call contextSave
80000812:	cd 0f       	rcall	800007b2 <contextSave>
	call scheduler
80000814:	f0 1f 00 04 	mcall	80000824 <_yield+0x12>
	call contextRestore
80000818:	ce 5f       	rcall	800007e2 <contextRestore>
8000081a:	00 00       	add	r0,r0
8000081c:	00 00       	add	r0,r0
8000081e:	05 bc       	ld.ub	r12,r2[0x3]
80000820:	00 00       	add	r0,r0
80000822:	05 c4       	ld.ub	r4,r2[0x4]
80000824:	80 00       	ld.sh	r0,r0[0x0]
80000826:	08 28       	rsub	r8,r4

80000828 <scheduler>:
#include "stdbool.h"

bool ChangeIdleTaskPriorityToHighest(void);
bool ChangeIdleTaskPriorityToLowest(void);

void scheduler(void){	
80000828:	eb cd 40 80 	pushm	r7,lr
8000082c:	1a 97       	mov	r7,sp
	Check_Waiting_Queue();
8000082e:	f0 1f 00 05 	mcall	80000840 <scheduler+0x18>
	Check_Blocked_Queue();
80000832:	f0 1f 00 05 	mcall	80000844 <scheduler+0x1c>
	Choose_A_Task_From_Ready_Queue();//If a task is the same prio it goes at the end of the tasks with same prio's
80000836:	f0 1f 00 05 	mcall	80000848 <scheduler+0x20>
}
8000083a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000083e:	00 00       	add	r0,r0
80000840:	80 00       	ld.sh	r0,r0[0x0]
80000842:	08 7c       	tst	r12,r4
80000844:	80 00       	ld.sh	r0,r0[0x0]
80000846:	0a f4       	st.b	--r5,r4
80000848:	80 00       	ld.sh	r0,r0[0x0]
8000084a:	09 00       	ld.w	r0,r4++

8000084c <ROSA_Scheduler>:
bool ROSA_Scheduler(void){
8000084c:	eb cd 40 80 	pushm	r7,lr
80000850:	1a 97       	mov	r7,sp
	TCBLIST=READY;
80000852:	48 88       	lddpc	r8,80000870 <ROSA_Scheduler+0x24>
80000854:	70 09       	ld.w	r9,r8[0x0]
80000856:	48 88       	lddpc	r8,80000874 <ROSA_Scheduler+0x28>
80000858:	91 09       	st.w	r8[0x0],r9
	READY=READY->nexttcb;//Changes the TCBLIST to Ready so the task gets removed from the top of the Ready queue
8000085a:	48 68       	lddpc	r8,80000870 <ROSA_Scheduler+0x24>
8000085c:	70 08       	ld.w	r8,r8[0x0]
8000085e:	70 09       	ld.w	r9,r8[0x0]
80000860:	48 48       	lddpc	r8,80000870 <ROSA_Scheduler+0x24>
80000862:	91 09       	st.w	r8[0x0],r9
	ROSA_start();
80000864:	f0 1f 00 05 	mcall	80000878 <ROSA_Scheduler+0x2c>
	return true;
80000868:	30 18       	mov	r8,1
}
8000086a:	10 9c       	mov	r12,r8
8000086c:	e3 cd 80 80 	ldm	sp++,r7,pc
80000870:	00 00       	add	r0,r0
80000872:	05 c0       	ld.ub	r0,r2[0x4]
80000874:	00 00       	add	r0,r0
80000876:	05 bc       	ld.ub	r12,r2[0x3]
80000878:	80 00       	ld.sh	r0,r0[0x0]
8000087a:	07 48       	ld.w	r8,--r3

8000087c <Check_Waiting_Queue>:
	interruptDisable();
	TaskHandleID[0]->priority=IDLE_PRIORITY;
	interruptEnable();
	return true;
}
void Check_Waiting_Queue(){
8000087c:	eb cd 40 80 	pushm	r7,lr
80000880:	1a 97       	mov	r7,sp
80000882:	20 2d       	sub	sp,8
	tcb *Temp=WAITING,*Help;
80000884:	49 c8       	lddpc	r8,800008f4 <Check_Waiting_Queue+0x78>
80000886:	70 08       	ld.w	r8,r8[0x0]
80000888:	ef 48 ff f8 	st.w	r7[-8],r8
	if(WAITING==NULL)
8000088c:	49 a8       	lddpc	r8,800008f4 <Check_Waiting_Queue+0x78>
8000088e:	70 08       	ld.w	r8,r8[0x0]
80000890:	58 08       	cp.w	r8,0
80000892:	c2 c0       	breq	800008ea <Check_Waiting_Queue+0x6e>
	return;
	if(Temp->waitUntil>SystemTime) //If tasks waiting time is bigger than systems time then no task will migrate to ready queue
80000894:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000898:	f0 ea 00 64 	ld.d	r10,r8[100]
8000089c:	49 78       	lddpc	r8,800008f8 <Check_Waiting_Queue+0x7c>
8000089e:	f0 e8 00 00 	ld.d	r8,r8[0]
800008a2:	10 3a       	cp.w	r10,r8
800008a4:	f2 0b 13 00 	cpc	r11,r9
800008a8:	e0 88 00 10 	brls	800008c8 <Check_Waiting_Queue+0x4c>
	return;
800008ac:	c2 08       	rjmp	800008ec <Check_Waiting_Queue+0x70>
	while(Temp!=NULL && Temp->waitUntil<=SystemTime){//If task EXSISTS and its waiting time is lower or equal then
		//Help=Temp;
		WAITING=WAITING->nexttcb;//Unchain it from the list (since it is always the first element) and assign ptr of the next task to the WAITING
800008ae:	49 28       	lddpc	r8,800008f4 <Check_Waiting_Queue+0x78>
800008b0:	70 08       	ld.w	r8,r8[0x0]
800008b2:	70 09       	ld.w	r9,r8[0x0]
800008b4:	49 08       	lddpc	r8,800008f4 <Check_Waiting_Queue+0x78>
800008b6:	91 09       	st.w	r8[0x0],r9
		Insert_Ready(Temp);//Move it to the ready queue
800008b8:	ee fc ff f8 	ld.w	r12,r7[-8]
800008bc:	f0 1f 00 10 	mcall	800008fc <Check_Waiting_Queue+0x80>
		Temp=WAITING;//Change the temp node to the beginning of the queue
800008c0:	48 d8       	lddpc	r8,800008f4 <Check_Waiting_Queue+0x78>
800008c2:	70 08       	ld.w	r8,r8[0x0]
800008c4:	ef 48 ff f8 	st.w	r7[-8],r8
	tcb *Temp=WAITING,*Help;
	if(WAITING==NULL)
	return;
	if(Temp->waitUntil>SystemTime) //If tasks waiting time is bigger than systems time then no task will migrate to ready queue
	return;
	while(Temp!=NULL && Temp->waitUntil<=SystemTime){//If task EXSISTS and its waiting time is lower or equal then
800008c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800008cc:	58 08       	cp.w	r8,0
800008ce:	c0 f0       	breq	800008ec <Check_Waiting_Queue+0x70>
800008d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800008d4:	f0 ea 00 64 	ld.d	r10,r8[100]
800008d8:	48 88       	lddpc	r8,800008f8 <Check_Waiting_Queue+0x7c>
800008da:	f0 e8 00 00 	ld.d	r8,r8[0]
800008de:	10 3a       	cp.w	r10,r8
800008e0:	f2 0b 13 00 	cpc	r11,r9
800008e4:	fe 98 ff e5 	brls	800008ae <Check_Waiting_Queue+0x32>
800008e8:	c0 28       	rjmp	800008ec <Check_Waiting_Queue+0x70>
	return true;
}
void Check_Waiting_Queue(){
	tcb *Temp=WAITING,*Help;
	if(WAITING==NULL)
	return;
800008ea:	d7 03       	nop
		//Help=Temp;
		WAITING=WAITING->nexttcb;//Unchain it from the list (since it is always the first element) and assign ptr of the next task to the WAITING
		Insert_Ready(Temp);//Move it to the ready queue
		Temp=WAITING;//Change the temp node to the beginning of the queue
	}
}
800008ec:	2f ed       	sub	sp,-8
800008ee:	e3 cd 80 80 	ldm	sp++,r7,pc
800008f2:	00 00       	add	r0,r0
800008f4:	00 00       	add	r0,r0
800008f6:	05 c8       	ld.ub	r8,r2[0x4]
800008f8:	00 00       	add	r0,r0
800008fa:	05 70       	ld.ub	r0,--r2
800008fc:	80 00       	ld.sh	r0,r0[0x0]
800008fe:	09 34       	ld.ub	r4,r4++

80000900 <Choose_A_Task_From_Ready_Queue>:
void Choose_A_Task_From_Ready_Queue(){
80000900:	eb cd 40 80 	pushm	r7,lr
80000904:	1a 97       	mov	r7,sp
	if(READY !=NULL){
80000906:	48 a8       	lddpc	r8,8000092c <Choose_A_Task_From_Ready_Queue+0x2c>
80000908:	70 08       	ld.w	r8,r8[0x0]
8000090a:	58 08       	cp.w	r8,0
8000090c:	c0 e0       	breq	80000928 <Choose_A_Task_From_Ready_Queue+0x28>
		EXECTASK=READY ;//Executing ptr to the first node in ready queue
8000090e:	48 88       	lddpc	r8,8000092c <Choose_A_Task_From_Ready_Queue+0x2c>
80000910:	70 09       	ld.w	r9,r8[0x0]
80000912:	48 88       	lddpc	r8,80000930 <Choose_A_Task_From_Ready_Queue+0x30>
80000914:	91 09       	st.w	r8[0x0],r9
		READY =READY ->nexttcb;//Queue should now point to the second node (UNLINK THE FIRST ELEMENT)
80000916:	48 68       	lddpc	r8,8000092c <Choose_A_Task_From_Ready_Queue+0x2c>
80000918:	70 08       	ld.w	r8,r8[0x0]
8000091a:	70 09       	ld.w	r9,r8[0x0]
8000091c:	48 48       	lddpc	r8,8000092c <Choose_A_Task_From_Ready_Queue+0x2c>
8000091e:	91 09       	st.w	r8[0x0],r9
		EXECTASK->nexttcb=NULL;//Pointer in the tcb structure shouldn't point nowhere =NULL
80000920:	48 48       	lddpc	r8,80000930 <Choose_A_Task_From_Ready_Queue+0x30>
80000922:	70 08       	ld.w	r8,r8[0x0]
80000924:	30 09       	mov	r9,0
80000926:	91 09       	st.w	r8[0x0],r9
	}
}
80000928:	e3 cd 80 80 	ldm	sp++,r7,pc
8000092c:	00 00       	add	r0,r0
8000092e:	05 c0       	ld.ub	r0,r2[0x4]
80000930:	00 00       	add	r0,r0
80000932:	05 c4       	ld.ub	r4,r2[0x4]

80000934 <Insert_Ready>:
void Insert_Ready(tcb *TASK){
80000934:	eb cd 40 80 	pushm	r7,lr
80000938:	1a 97       	mov	r7,sp
8000093a:	20 3d       	sub	sp,12
8000093c:	ef 4c ff f4 	st.w	r7[-12],r12
	tcb *TEMP=READY,*PREVIOUS=READY;
80000940:	4b 58       	lddpc	r8,80000a14 <Insert_Ready+0xe0>
80000942:	70 08       	ld.w	r8,r8[0x0]
80000944:	ef 48 ff f8 	st.w	r7[-8],r8
80000948:	4b 38       	lddpc	r8,80000a14 <Insert_Ready+0xe0>
8000094a:	70 08       	ld.w	r8,r8[0x0]
8000094c:	ef 48 ff fc 	st.w	r7[-4],r8
	if(READY==NULL){
80000950:	4b 18       	lddpc	r8,80000a14 <Insert_Ready+0xe0>
80000952:	70 08       	ld.w	r8,r8[0x0]
80000954:	58 08       	cp.w	r8,0
80000956:	c0 a1       	brne	8000096a <Insert_Ready+0x36>
		READY=TASK;
80000958:	4a f8       	lddpc	r8,80000a14 <Insert_Ready+0xe0>
8000095a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000095e:	91 09       	st.w	r8[0x0],r9
		TASK->nexttcb=NULL;
80000960:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000964:	30 09       	mov	r9,0
80000966:	91 09       	st.w	r8[0x0],r9
		return;
80000968:	c5 28       	rjmp	80000a0c <Insert_Ready+0xd8>
	}
	if(TASK->priority==IDLE_PRIORITY){//Inserting the IDLE Task
8000096a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000096e:	71 d8       	ld.w	r8,r8[0x74]
80000970:	58 08       	cp.w	r8,0
80000972:	c1 91       	brne	800009a4 <Insert_Ready+0x70>
		while(TEMP!=NULL){
80000974:	c0 a8       	rjmp	80000988 <Insert_Ready+0x54>
			PREVIOUS=TEMP;
80000976:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000097a:	ef 48 ff fc 	st.w	r7[-4],r8
			TEMP=TEMP->nexttcb;
8000097e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000982:	70 08       	ld.w	r8,r8[0x0]
80000984:	ef 48 ff f8 	st.w	r7[-8],r8
		READY=TASK;
		TASK->nexttcb=NULL;
		return;
	}
	if(TASK->priority==IDLE_PRIORITY){//Inserting the IDLE Task
		while(TEMP!=NULL){
80000988:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000098c:	58 08       	cp.w	r8,0
8000098e:	cf 41       	brne	80000976 <Insert_Ready+0x42>
			PREVIOUS=TEMP;
			TEMP=TEMP->nexttcb;
		}
		TASK->nexttcb=NULL;
80000990:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000994:	30 09       	mov	r9,0
80000996:	91 09       	st.w	r8[0x0],r9
		PREVIOUS->nexttcb=TASK;		
80000998:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000099c:	ee f9 ff f4 	ld.w	r9,r7[-12]
800009a0:	91 09       	st.w	r8[0x0],r9
		return;
800009a2:	c3 58       	rjmp	80000a0c <Insert_Ready+0xd8>
	}
	if(TASK->priority>READY->priority){
800009a4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800009a8:	71 d9       	ld.w	r9,r8[0x74]
800009aa:	49 b8       	lddpc	r8,80000a14 <Insert_Ready+0xe0>
800009ac:	70 08       	ld.w	r8,r8[0x0]
800009ae:	71 d8       	ld.w	r8,r8[0x74]
800009b0:	10 39       	cp.w	r9,r8
800009b2:	e0 8a 00 29 	brle	80000a04 <Insert_Ready+0xd0>
		TASK->nexttcb=READY;
800009b6:	49 88       	lddpc	r8,80000a14 <Insert_Ready+0xe0>
800009b8:	70 09       	ld.w	r9,r8[0x0]
800009ba:	ee f8 ff f4 	ld.w	r8,r7[-12]
800009be:	91 09       	st.w	r8[0x0],r9
		READY=TASK;
800009c0:	49 58       	lddpc	r8,80000a14 <Insert_Ready+0xe0>
800009c2:	ee f9 ff f4 	ld.w	r9,r7[-12]
800009c6:	91 09       	st.w	r8[0x0],r9
		return;		
800009c8:	c2 28       	rjmp	80000a0c <Insert_Ready+0xd8>
	}
	while(TEMP!=NULL){
		if(TASK->priority>TEMP->priority){
800009ca:	ee f8 ff f4 	ld.w	r8,r7[-12]
800009ce:	71 d9       	ld.w	r9,r8[0x74]
800009d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800009d4:	71 d8       	ld.w	r8,r8[0x74]
800009d6:	10 39       	cp.w	r9,r8
800009d8:	e0 8a 00 0d 	brle	800009f2 <Insert_Ready+0xbe>
			TASK->nexttcb=TEMP;
800009dc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800009e0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800009e4:	91 09       	st.w	r8[0x0],r9
			PREVIOUS->nexttcb=TASK;
800009e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800009ea:	ee f9 ff f4 	ld.w	r9,r7[-12]
800009ee:	91 09       	st.w	r8[0x0],r9
			return;
800009f0:	c0 e8       	rjmp	80000a0c <Insert_Ready+0xd8>
		}
		PREVIOUS=TEMP;
800009f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800009f6:	ef 48 ff fc 	st.w	r7[-4],r8
		TEMP=TEMP->nexttcb;
800009fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800009fe:	70 08       	ld.w	r8,r8[0x0]
80000a00:	ef 48 ff f8 	st.w	r7[-8],r8
	if(TASK->priority>READY->priority){
		TASK->nexttcb=READY;
		READY=TASK;
		return;		
	}
	while(TEMP!=NULL){
80000a04:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a08:	58 08       	cp.w	r8,0
80000a0a:	ce 01       	brne	800009ca <Insert_Ready+0x96>
			return;
		}
		PREVIOUS=TEMP;
		TEMP=TEMP->nexttcb;
	}
}
80000a0c:	2f dd       	sub	sp,-12
80000a0e:	e3 cd 80 80 	ldm	sp++,r7,pc
80000a12:	00 00       	add	r0,r0
80000a14:	00 00       	add	r0,r0
80000a16:	05 c0       	ld.ub	r0,r2[0x4]

80000a18 <Insert_Waiting>:
void Insert_Waiting(tcb *TASK){
80000a18:	eb cd 40 8c 	pushm	r2-r3,r7,lr
80000a1c:	1a 97       	mov	r7,sp
80000a1e:	20 3d       	sub	sp,12
80000a20:	ef 4c ff f4 	st.w	r7[-12],r12
	int waitUntil=TASK->waitUntil;
80000a24:	ee fc ff f4 	ld.w	r12,r7[-12]
80000a28:	f8 e2 00 64 	ld.d	r2,r12[100]
80000a2c:	04 9c       	mov	r12,r2
80000a2e:	ef 4c ff f8 	st.w	r7[-8],r12
	tcb *Temp=WAITING;
80000a32:	4b 0c       	lddpc	r12,80000af0 <Insert_Waiting+0xd8>
80000a34:	78 0c       	ld.w	r12,r12[0x0]
80000a36:	ef 4c ff fc 	st.w	r7[-4],r12
	if(Temp==NULL){//If the list is empty put it in first
80000a3a:	ee fc ff fc 	ld.w	r12,r7[-4]
80000a3e:	58 0c       	cp.w	r12,0
80000a40:	c0 a1       	brne	80000a54 <Insert_Waiting+0x3c>
		WAITING=TASK;
80000a42:	4a c8       	lddpc	r8,80000af0 <Insert_Waiting+0xd8>
80000a44:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000a48:	91 09       	st.w	r8[0x0],r9
		WAITING->nexttcb=NULL;
80000a4a:	4a a8       	lddpc	r8,80000af0 <Insert_Waiting+0xd8>
80000a4c:	70 08       	ld.w	r8,r8[0x0]
80000a4e:	30 09       	mov	r9,0
80000a50:	91 09       	st.w	r8[0x0],r9
		return;
80000a52:	c4 c8       	rjmp	80000aea <Insert_Waiting+0xd2>
	}
	if(Temp->waitUntil>waitUntil){//Inserting first task with highest priority in the whole ready queue
80000a54:	ee fc ff fc 	ld.w	r12,r7[-4]
80000a58:	f8 e2 00 64 	ld.d	r2,r12[100]
80000a5c:	ee fa ff f8 	ld.w	r10,r7[-8]
80000a60:	ee fc ff f8 	ld.w	r12,r7[-8]
80000a64:	bf 5c       	asr	r12,0x1f
80000a66:	18 9b       	mov	r11,r12
80000a68:	14 32       	cp.w	r2,r10
80000a6a:	f6 03 13 00 	cpc	r3,r11
80000a6e:	e0 88 00 2e 	brls	80000aca <Insert_Waiting+0xb2>
		TASK->nexttcb=Temp;
80000a72:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000a76:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000a7a:	91 09       	st.w	r8[0x0],r9
		WAITING=TASK;
80000a7c:	49 d8       	lddpc	r8,80000af0 <Insert_Waiting+0xd8>
80000a7e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000a82:	91 09       	st.w	r8[0x0],r9
		return;
80000a84:	c3 38       	rjmp	80000aea <Insert_Waiting+0xd2>
	}
	while(Temp->nexttcb!=NULL){
		if(Temp->nexttcb->waitUntil>waitUntil){//Inserting not first
80000a86:	ee fa ff fc 	ld.w	r10,r7[-4]
80000a8a:	74 0a       	ld.w	r10,r10[0x0]
80000a8c:	f4 ea 00 64 	ld.d	r10,r10[100]
80000a90:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a94:	ee fc ff f8 	ld.w	r12,r7[-8]
80000a98:	bf 5c       	asr	r12,0x1f
80000a9a:	18 99       	mov	r9,r12
80000a9c:	10 3a       	cp.w	r10,r8
80000a9e:	f2 0b 13 00 	cpc	r11,r9
80000aa2:	e0 88 00 0e 	brls	80000abe <Insert_Waiting+0xa6>
			TASK->nexttcb=Temp->nexttcb;
80000aa6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000aaa:	70 09       	ld.w	r9,r8[0x0]
80000aac:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000ab0:	91 09       	st.w	r8[0x0],r9
			Temp->nexttcb=TASK;
80000ab2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ab6:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000aba:	91 09       	st.w	r8[0x0],r9
			return;
80000abc:	c1 78       	rjmp	80000aea <Insert_Waiting+0xd2>
		}
		Temp=Temp->nexttcb;
80000abe:	ee fa ff fc 	ld.w	r10,r7[-4]
80000ac2:	74 0a       	ld.w	r10,r10[0x0]
80000ac4:	ef 4a ff fc 	st.w	r7[-4],r10
80000ac8:	c0 28       	rjmp	80000acc <Insert_Waiting+0xb4>
	if(Temp->waitUntil>waitUntil){//Inserting first task with highest priority in the whole ready queue
		TASK->nexttcb=Temp;
		WAITING=TASK;
		return;
	}
	while(Temp->nexttcb!=NULL){
80000aca:	d7 03       	nop
80000acc:	ee fa ff fc 	ld.w	r10,r7[-4]
80000ad0:	74 0a       	ld.w	r10,r10[0x0]
80000ad2:	58 0a       	cp.w	r10,0
80000ad4:	cd 91       	brne	80000a86 <Insert_Waiting+0x6e>
			return;
		}
		Temp=Temp->nexttcb;
	}
	//If the task should be put at the end of the list
	Temp->nexttcb=TASK;
80000ad6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ada:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000ade:	91 09       	st.w	r8[0x0],r9
	TASK->nexttcb=NULL;
80000ae0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000ae4:	30 09       	mov	r9,0
80000ae6:	91 09       	st.w	r8[0x0],r9
	return;
80000ae8:	d7 03       	nop
}
80000aea:	2f dd       	sub	sp,-12
80000aec:	e3 cd 80 8c 	ldm	sp++,r2-r3,r7,pc
80000af0:	00 00       	add	r0,r0
80000af2:	05 c8       	ld.ub	r8,r2[0x4]

80000af4 <Check_Blocked_Queue>:
void Insert_Blocked(tcb* Task){
	Task->nexttcb=BLOCKED;
	BLOCKED=Task;
}

void Check_Blocked_Queue(){
80000af4:	eb cd 40 80 	pushm	r7,lr
80000af8:	1a 97       	mov	r7,sp
80000afa:	20 2d       	sub	sp,8
	tcb *Temp=BLOCKED, *Previous=BLOCKED;
80000afc:	49 98       	lddpc	r8,80000b60 <Check_Blocked_Queue+0x6c>
80000afe:	70 08       	ld.w	r8,r8[0x0]
80000b00:	ef 48 ff f8 	st.w	r7[-8],r8
80000b04:	49 78       	lddpc	r8,80000b60 <Check_Blocked_Queue+0x6c>
80000b06:	70 08       	ld.w	r8,r8[0x0]
80000b08:	ef 48 ff fc 	st.w	r7[-4],r8
	//Travers the whole list
	while(Temp!=NULL){
80000b0c:	c2 28       	rjmp	80000b50 <Check_Blocked_Queue+0x5c>
		if(Temp->waitSemaphore){
80000b0e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b12:	f0 e8 00 6c 	ld.d	r8,r8[108]
80000b16:	58 08       	cp.w	r8,0
80000b18:	5c 29       	cpc	r9
80000b1a:	c1 60       	breq	80000b46 <Check_Blocked_Queue+0x52>
			Temp=Temp->nexttcb;
80000b1c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b20:	70 08       	ld.w	r8,r8[0x0]
80000b22:	ef 48 ff f8 	st.w	r7[-8],r8
			Previous->nexttcb=Temp->nexttcb;
80000b26:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b2a:	70 09       	ld.w	r9,r8[0x0]
80000b2c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000b30:	91 09       	st.w	r8[0x0],r9
			Temp->nexttcb=SUSPENDED;
80000b32:	48 d8       	lddpc	r8,80000b64 <Check_Blocked_Queue+0x70>
80000b34:	70 09       	ld.w	r9,r8[0x0]
80000b36:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b3a:	91 09       	st.w	r8[0x0],r9
			SUSPENDED=Temp;
80000b3c:	48 a8       	lddpc	r8,80000b64 <Check_Blocked_Queue+0x70>
80000b3e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000b42:	91 09       	st.w	r8[0x0],r9
			return;
80000b44:	c0 a8       	rjmp	80000b58 <Check_Blocked_Queue+0x64>
		}
		Temp=Temp->nexttcb;
80000b46:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b4a:	70 08       	ld.w	r8,r8[0x0]
80000b4c:	ef 48 ff f8 	st.w	r7[-8],r8
}

void Check_Blocked_Queue(){
	tcb *Temp=BLOCKED, *Previous=BLOCKED;
	//Travers the whole list
	while(Temp!=NULL){
80000b50:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000b54:	58 08       	cp.w	r8,0
80000b56:	cd c1       	brne	80000b0e <Check_Blocked_Queue+0x1a>
			SUSPENDED=Temp;
			return;
		}
		Temp=Temp->nexttcb;
	}
80000b58:	2f ed       	sub	sp,-8
80000b5a:	e3 cd 80 80 	ldm	sp++,r7,pc
80000b5e:	00 00       	add	r0,r0
80000b60:	00 00       	add	r0,r0
80000b62:	05 b8       	ld.ub	r8,r2[0x3]
80000b64:	00 00       	add	r0,r0
80000b66:	05 cc       	ld.ub	r12,r2[0x4]

80000b68 <C.4.9500>:
80000b68:	00 00 00 02 00 00 00 08 00 00 00 20 00 00 00 80     ........... ....

80000b78 <timerISR>:
#include "kernel/rosa_tim.h"

TimerTick SystemTime=0;

__attribute__((__interrupt__)) void timerISR(void)
{
80000b78:	eb cd 40 80 	pushm	r7,lr
80000b7c:	1a 97       	mov	r7,sp
80000b7e:	20 2d       	sub	sp,8
	int sr;
	volatile avr32_tc_t * tc = &AVR32_TC;
80000b80:	fe 78 38 00 	mov	r8,-51200
80000b84:	ef 48 ff fc 	st.w	r7[-4],r8
	//increments the SystemTime, resets before overflow
	if(SystemTime+1 != TIMERTICK_MAXVAL)
80000b88:	49 a8       	lddpc	r8,80000bf0 <timerISR+0x78>
80000b8a:	f0 e8 00 00 	ld.d	r8,r8[0]
80000b8e:	3f da       	mov	r10,-3
80000b90:	3f fb       	mov	r11,-1
80000b92:	14 38       	cp.w	r8,r10
80000b94:	f6 09 13 00 	cpc	r9,r11
80000b98:	c0 e0       	breq	80000bb4 <timerISR+0x3c>
	SystemTime++;
80000b9a:	49 68       	lddpc	r8,80000bf0 <timerISR+0x78>
80000b9c:	f0 ea 00 00 	ld.d	r10,r8[0]
80000ba0:	30 18       	mov	r8,1
80000ba2:	30 09       	mov	r9,0
80000ba4:	f4 08 00 08 	add	r8,r10,r8
80000ba8:	f6 09 00 49 	adc	r9,r11,r9
80000bac:	49 1a       	lddpc	r10,80000bf0 <timerISR+0x78>
80000bae:	f4 e9 00 00 	st.d	r10[0],r8
80000bb2:	c0 68       	rjmp	80000bbe <timerISR+0x46>
	else
	SystemTime = 0;
80000bb4:	48 fa       	lddpc	r10,80000bf0 <timerISR+0x78>
80000bb6:	30 08       	mov	r8,0
80000bb8:	30 09       	mov	r9,0
80000bba:	f4 e9 00 00 	st.d	r10[0],r8
	ledToggle(LED4_GPIO);
80000bbe:	33 3c       	mov	r12,51
80000bc0:	f0 1f 00 0d 	mcall	80000bf4 <timerISR+0x7c>
	//Read the timer status register to determine if this is a valid interrupt
	sr = tc->channel[0].sr;
80000bc4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000bc8:	70 88       	ld.w	r8,r8[0x20]
80000bca:	ef 48 ff f8 	st.w	r7[-8],r8
	if(sr & AVR32_TC_CPCS_MASK){
80000bce:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000bd2:	e2 18 00 10 	andl	r8,0x10,COH
80000bd6:	c0 80       	breq	80000be6 <timerISR+0x6e>
		Insert_Ready(EXECTASK);
80000bd8:	48 88       	lddpc	r8,80000bf8 <timerISR+0x80>
80000bda:	70 08       	ld.w	r8,r8[0x0]
80000bdc:	10 9c       	mov	r12,r8
80000bde:	f0 1f 00 08 	mcall	80000bfc <timerISR+0x84>
		ROSA_yieldFromISR();
80000be2:	f0 1f 00 08 	mcall	80000c00 <timerISR+0x88>
	}

}
80000be6:	2f ed       	sub	sp,-8
80000be8:	e3 cd 40 80 	ldm	sp++,r7,lr
80000bec:	d6 03       	rete
80000bee:	00 00       	add	r0,r0
80000bf0:	00 00       	add	r0,r0
80000bf2:	05 70       	ld.ub	r0,--r2
80000bf4:	80 00       	ld.sh	r0,r0[0x0]
80000bf6:	10 bc       	st.h	r8++,r12
80000bf8:	00 00       	add	r0,r0
80000bfa:	05 c4       	ld.ub	r4,r2[0x4]
80000bfc:	80 00       	ld.sh	r0,r0[0x0]
80000bfe:	09 34       	ld.ub	r4,r4++
80000c00:	80 00       	ld.sh	r0,r0[0x0]
80000c02:	01 64       	ld.uh	r4,--r0

80000c04 <timerPeriodSet>:

int timerPeriodSet(unsigned int ms)
{
80000c04:	eb cd 40 80 	pushm	r7,lr
80000c08:	1a 97       	mov	r7,sp
80000c0a:	20 7d       	sub	sp,28
80000c0c:	ef 4c ff e4 	st.w	r7[-28],r12

	int rc, prescale;
	int f[] = { 2, 8, 32, 128 };
80000c10:	4a 48       	lddpc	r8,80000ca0 <timerPeriodSet+0x9c>
80000c12:	ee ca 00 18 	sub	r10,r7,24
80000c16:	10 9b       	mov	r11,r8
80000c18:	f6 e8 00 00 	ld.d	r8,r11[0]
80000c1c:	f4 e9 00 00 	st.d	r10[0],r8
80000c20:	f6 e8 00 08 	ld.d	r8,r11[8]
80000c24:	f4 e9 00 08 	st.d	r10[8],r8
	//FOSC0 / factor_prescale * time[s];
	prescale = AVR32_TC_CMR0_TCCLKS_TIMER_CLOCK5;
80000c28:	30 48       	mov	r8,4
80000c2a:	ef 48 ff fc 	st.w	r7[-4],r8
	rc = FOSC0 / f[prescale - 1] * ms / 1000;
80000c2e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c32:	20 18       	sub	r8,1
80000c34:	a3 68       	lsl	r8,0x2
80000c36:	ee 08 00 08 	add	r8,r7,r8
80000c3a:	f0 f9 ff e8 	ld.w	r9,r8[-24]
80000c3e:	e0 68 1b 00 	mov	r8,6912
80000c42:	ea 18 00 b7 	orh	r8,0xb7
80000c46:	f0 09 0c 08 	divs	r8,r8,r9
80000c4a:	10 99       	mov	r9,r8
80000c4c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000c50:	b1 39       	mul	r9,r8
80000c52:	e0 68 4d d3 	mov	r8,19923
80000c56:	ea 18 10 62 	orh	r8,0x1062
80000c5a:	f2 08 06 48 	mulu.d	r8,r9,r8
80000c5e:	f2 08 16 06 	lsr	r8,r9,0x6
80000c62:	ef 48 ff f8 	st.w	r7[-8],r8
	timerPrescaleSet(prescale);
80000c66:	ee fc ff fc 	ld.w	r12,r7[-4]
80000c6a:	f0 1f 00 0f 	mcall	80000ca4 <timerPeriodSet+0xa0>
	timerRCSet(rc);
80000c6e:	ee fc ff f8 	ld.w	r12,r7[-8]
80000c72:	f0 1f 00 0e 	mcall	80000ca8 <timerPeriodSet+0xa4>
	return rc * prescale / FOSC0;
80000c76:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000c7a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000c7e:	f2 08 02 4a 	mul	r10,r9,r8
80000c82:	e0 68 9f 81 	mov	r8,40833
80000c86:	ea 18 16 5e 	orh	r8,0x165e
80000c8a:	f4 08 04 48 	muls.d	r8,r10,r8
80000c8e:	b5 49       	asr	r9,0x14
80000c90:	f4 08 14 1f 	asr	r8,r10,0x1f
80000c94:	f2 08 01 08 	sub	r8,r9,r8
}
80000c98:	10 9c       	mov	r12,r8
80000c9a:	2f 9d       	sub	sp,-28
80000c9c:	e3 cd 80 80 	ldm	sp++,r7,pc
80000ca0:	80 00       	ld.sh	r0,r0[0x0]
80000ca2:	0b 68       	ld.uh	r8,--r5
80000ca4:	80 00       	ld.sh	r0,r0[0x0]
80000ca6:	14 28       	rsub	r8,r10
80000ca8:	80 00       	ld.sh	r0,r0[0x0]
80000caa:	14 12       	sub	r2,r10

80000cac <ROSA_Delay>:



bool ROSA_Delay(TimerTick ticks){
80000cac:	eb cd 40 80 	pushm	r7,lr
80000cb0:	1a 97       	mov	r7,sp
80000cb2:	20 2d       	sub	sp,8
80000cb4:	ee eb ff f8 	st.d	r7[-8],r10
	
	interruptDisable();
80000cb8:	f0 1f 00 19 	mcall	80000d1c <ROSA_Delay+0x70>
	
	if(ticks > TIMERTICK_MAXVAL - SystemTime)
80000cbc:	49 98       	lddpc	r8,80000d20 <ROSA_Delay+0x74>
80000cbe:	f0 e8 00 00 	ld.d	r8,r8[0]
80000cc2:	3f ea       	mov	r10,-2
80000cc4:	3f fb       	mov	r11,-1
80000cc6:	10 1a       	sub	r10,r8
80000cc8:	f6 09 01 4b 	sbc	r11,r11,r9
80000ccc:	ee e8 ff f8 	ld.d	r8,r7[-8]
80000cd0:	10 3a       	cp.w	r10,r8
80000cd2:	f2 0b 13 00 	cpc	r11,r9
80000cd6:	c0 82       	brcc	80000ce6 <ROSA_Delay+0x3a>
		EXECTASK->waitUntil = TIMERTICK_MAXVAL;
80000cd8:	49 38       	lddpc	r8,80000d24 <ROSA_Delay+0x78>
80000cda:	70 0a       	ld.w	r10,r8[0x0]
80000cdc:	3f e8       	mov	r8,-2
80000cde:	3f f9       	mov	r9,-1
80000ce0:	f4 e9 00 64 	st.d	r10[100],r8
80000ce4:	c0 e8       	rjmp	80000d00 <ROSA_Delay+0x54>
	else
		EXECTASK->waitUntil = SystemTime + ticks;	//add delay-length to current time
80000ce6:	49 08       	lddpc	r8,80000d24 <ROSA_Delay+0x78>
80000ce8:	70 0c       	ld.w	r12,r8[0x0]
80000cea:	48 e8       	lddpc	r8,80000d20 <ROSA_Delay+0x74>
80000cec:	f0 ea 00 00 	ld.d	r10,r8[0]
80000cf0:	ee e8 ff f8 	ld.d	r8,r7[-8]
80000cf4:	f4 08 00 08 	add	r8,r10,r8
80000cf8:	f6 09 00 49 	adc	r9,r11,r9
80000cfc:	f8 e9 00 64 	st.d	r12[100],r8
	
	Insert_Waiting(EXECTASK);	//Put the task into the Waiting Queue
80000d00:	48 98       	lddpc	r8,80000d24 <ROSA_Delay+0x78>
80000d02:	70 08       	ld.w	r8,r8[0x0]
80000d04:	10 9c       	mov	r12,r8
80000d06:	f0 1f 00 09 	mcall	80000d28 <ROSA_Delay+0x7c>
	
	interruptEnable();
80000d0a:	f0 1f 00 09 	mcall	80000d2c <ROSA_Delay+0x80>
	
	ROSA_yield();		//Call the scheduler (ex: yield)	
80000d0e:	f0 1f 00 09 	mcall	80000d30 <ROSA_Delay+0x84>
	return true;
80000d12:	30 18       	mov	r8,1
}
80000d14:	10 9c       	mov	r12,r8
80000d16:	2f ed       	sub	sp,-8
80000d18:	e3 cd 80 80 	ldm	sp++,r7,pc
80000d1c:	80 00       	ld.sh	r0,r0[0x0]
80000d1e:	1f 66       	ld.uh	r6,--pc
80000d20:	00 00       	add	r0,r0
80000d22:	05 70       	ld.ub	r0,--r2
80000d24:	00 00       	add	r0,r0
80000d26:	05 c4       	ld.ub	r4,r2[0x4]
80000d28:	80 00       	ld.sh	r0,r0[0x0]
80000d2a:	0a 18       	sub	r8,r5
80000d2c:	80 00       	ld.sh	r0,r0[0x0]
80000d2e:	1f 6a       	ld.uh	r10,--pc
80000d30:	80 00       	ld.sh	r0,r0[0x0]
80000d32:	08 0a       	add	r10,r4

80000d34 <ROSA_DelayUntil>:

bool ROSA_DelayUntil(TimerTick * lastWakeTime, TimerTick period)
{
80000d34:	eb cd 40 80 	pushm	r7,lr
80000d38:	1a 97       	mov	r7,sp
80000d3a:	20 3d       	sub	sp,12
80000d3c:	ef 4c ff fc 	st.w	r7[-4],r12
80000d40:	ee eb ff f4 	st.d	r7[-12],r10
	interruptDisable();
80000d44:	f0 1f 00 1e 	mcall	80000dbc <ROSA_DelayUntil+0x88>
	
	if(TIMERTICK_MAXVAL - *lastWakeTime < period)
80000d48:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d4c:	f0 e8 00 00 	ld.d	r8,r8[0]
80000d50:	3f ea       	mov	r10,-2
80000d52:	3f fb       	mov	r11,-1
80000d54:	10 1a       	sub	r10,r8
80000d56:	f6 09 01 4b 	sbc	r11,r11,r9
80000d5a:	ee e8 ff f4 	ld.d	r8,r7[-12]
80000d5e:	10 3a       	cp.w	r10,r8
80000d60:	f2 0b 13 00 	cpc	r11,r9
80000d64:	c0 82       	brcc	80000d74 <ROSA_DelayUntil+0x40>
		EXECTASK->waitUntil = TIMERTICK_MAXVAL;
80000d66:	49 78       	lddpc	r8,80000dc0 <ROSA_DelayUntil+0x8c>
80000d68:	70 0a       	ld.w	r10,r8[0x0]
80000d6a:	3f e8       	mov	r8,-2
80000d6c:	3f f9       	mov	r9,-1
80000d6e:	f4 e9 00 64 	st.d	r10[100],r8
80000d72:	c0 f8       	rjmp	80000d90 <ROSA_DelayUntil+0x5c>
	else
		EXECTASK->waitUntil = *lastWakeTime + period;	//add delay-length value to current time
80000d74:	49 38       	lddpc	r8,80000dc0 <ROSA_DelayUntil+0x8c>
80000d76:	70 0c       	ld.w	r12,r8[0x0]
80000d78:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000d7c:	f0 ea 00 00 	ld.d	r10,r8[0]
80000d80:	ee e8 ff f4 	ld.d	r8,r7[-12]
80000d84:	f4 08 00 08 	add	r8,r10,r8
80000d88:	f6 09 00 49 	adc	r9,r11,r9
80000d8c:	f8 e9 00 64 	st.d	r12[100],r8

	Insert_Waiting(EXECTASK);				//Put the task into the Waiting Queue
80000d90:	48 c8       	lddpc	r8,80000dc0 <ROSA_DelayUntil+0x8c>
80000d92:	70 08       	ld.w	r8,r8[0x0]
80000d94:	10 9c       	mov	r12,r8
80000d96:	f0 1f 00 0c 	mcall	80000dc4 <ROSA_DelayUntil+0x90>
	
	interruptEnable();
80000d9a:	f0 1f 00 0c 	mcall	80000dc8 <ROSA_DelayUntil+0x94>
	
	ROSA_yield();					//Call the scheduler
80000d9e:	f0 1f 00 0c 	mcall	80000dcc <ROSA_DelayUntil+0x98>
	
	*lastWakeTime = SystemTime;		//When task gets to execute again, calculate new lastWakeTime value before exciting
80000da2:	48 c8       	lddpc	r8,80000dd0 <ROSA_DelayUntil+0x9c>
80000da4:	f0 e8 00 00 	ld.d	r8,r8[0]
80000da8:	ee fa ff fc 	ld.w	r10,r7[-4]
80000dac:	f4 e9 00 00 	st.d	r10[0],r8
	
	return true;
80000db0:	30 18       	mov	r8,1
}
80000db2:	10 9c       	mov	r12,r8
80000db4:	2f dd       	sub	sp,-12
80000db6:	e3 cd 80 80 	ldm	sp++,r7,pc
80000dba:	00 00       	add	r0,r0
80000dbc:	80 00       	ld.sh	r0,r0[0x0]
80000dbe:	1f 66       	ld.uh	r6,--pc
80000dc0:	00 00       	add	r0,r0
80000dc2:	05 c4       	ld.ub	r4,r2[0x4]
80000dc4:	80 00       	ld.sh	r0,r0[0x0]
80000dc6:	0a 18       	sub	r8,r5
80000dc8:	80 00       	ld.sh	r0,r0[0x0]
80000dca:	1f 6a       	ld.uh	r10,--pc
80000dcc:	80 00       	ld.sh	r0,r0[0x0]
80000dce:	08 0a       	add	r10,r4
80000dd0:	00 00       	add	r0,r0
80000dd2:	05 70       	ld.ub	r0,--r2

80000dd4 <ROSA_getTickTime>:


TimerTick ROSA_getTickTime(void){
80000dd4:	eb cd 40 80 	pushm	r7,lr
80000dd8:	1a 97       	mov	r7,sp
	return SystemTime;	
80000dda:	48 48       	lddpc	r8,80000de8 <ROSA_getTickTime+0x14>
80000ddc:	f0 e8 00 00 	ld.d	r8,r8[0]
}
80000de0:	10 9a       	mov	r10,r8
80000de2:	12 9b       	mov	r11,r9
80000de4:	e3 cd 80 80 	ldm	sp++,r7,pc
80000de8:	00 00       	add	r0,r0
80000dea:	05 70       	ld.ub	r0,--r2

80000dec <buttonInit>:
80000dec:	eb cd 40 80 	pushm	r7,lr
80000df0:	1a 97       	mov	r7,sp
80000df2:	30 1b       	mov	r11,1
80000df4:	35 8c       	mov	r12,88
80000df6:	f0 1f 00 07 	mcall	80000e10 <buttonInit+0x24>
80000dfa:	30 1b       	mov	r11,1
80000dfc:	35 5c       	mov	r12,85
80000dfe:	f0 1f 00 05 	mcall	80000e10 <buttonInit+0x24>
80000e02:	30 1b       	mov	r11,1
80000e04:	35 2c       	mov	r12,82
80000e06:	f0 1f 00 03 	mcall	80000e10 <buttonInit+0x24>
80000e0a:	e3 cd 80 80 	ldm	sp++,r7,pc
80000e0e:	00 00       	add	r0,r0
80000e10:	80 00       	ld.sh	r0,r0[0x0]
80000e12:	0e 74       	tst	r4,r7

80000e14 <isButton>:
80000e14:	eb cd 40 80 	pushm	r7,lr
80000e18:	1a 97       	mov	r7,sp
80000e1a:	20 1d       	sub	sp,4
80000e1c:	ef 4c ff fc 	st.w	r7[-4],r12
80000e20:	ee fc ff fc 	ld.w	r12,r7[-4]
80000e24:	f0 1f 00 05 	mcall	80000e38 <isButton+0x24>
80000e28:	18 98       	mov	r8,r12
80000e2a:	58 08       	cp.w	r8,0
80000e2c:	5f 08       	sreq	r8
80000e2e:	10 9c       	mov	r12,r8
80000e30:	2f fd       	sub	sp,-4
80000e32:	e3 cd 80 80 	ldm	sp++,r7,pc
80000e36:	00 00       	add	r0,r0
80000e38:	80 00       	ld.sh	r0,r0[0x0]
80000e3a:	0f bc       	ld.ub	r12,r7[0x3]

80000e3c <joystickInit>:
80000e3c:	eb cd 40 80 	pushm	r7,lr
80000e40:	1a 97       	mov	r7,sp
80000e42:	30 1b       	mov	r11,1
80000e44:	31 bc       	mov	r12,27
80000e46:	f0 1f 00 0b 	mcall	80000e70 <joystickInit+0x34>
80000e4a:	30 1b       	mov	r11,1
80000e4c:	31 9c       	mov	r12,25
80000e4e:	f0 1f 00 09 	mcall	80000e70 <joystickInit+0x34>
80000e52:	30 1b       	mov	r11,1
80000e54:	31 cc       	mov	r12,28
80000e56:	f0 1f 00 07 	mcall	80000e70 <joystickInit+0x34>
80000e5a:	30 1b       	mov	r11,1
80000e5c:	31 4c       	mov	r12,20
80000e5e:	f0 1f 00 05 	mcall	80000e70 <joystickInit+0x34>
80000e62:	30 1b       	mov	r11,1
80000e64:	31 ac       	mov	r12,26
80000e66:	f0 1f 00 03 	mcall	80000e70 <joystickInit+0x34>
80000e6a:	e3 cd 80 80 	ldm	sp++,r7,pc
80000e6e:	00 00       	add	r0,r0
80000e70:	80 00       	ld.sh	r0,r0[0x0]
80000e72:	0e 74       	tst	r4,r7

80000e74 <gpioInit>:
80000e74:	eb cd 40 80 	pushm	r7,lr
80000e78:	1a 97       	mov	r7,sp
80000e7a:	20 7d       	sub	sp,28
80000e7c:	ef 4c ff ec 	st.w	r7[-20],r12
80000e80:	ef 4b ff e8 	st.w	r7[-24],r11
80000e84:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000e88:	a5 58       	asr	r8,0x5
80000e8a:	ef 48 ff f4 	st.w	r7[-12],r8
80000e8e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000e92:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000e96:	ef 48 ff fc 	st.w	r7[-4],r8
80000e9a:	30 19       	mov	r9,1
80000e9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000ea0:	f2 08 09 48 	lsl	r8,r9,r8
80000ea4:	ef 48 ff f8 	st.w	r7[-8],r8
80000ea8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000eac:	a9 68       	lsl	r8,0x8
80000eae:	e0 28 f0 00 	sub	r8,61440
80000eb2:	ef 48 ff f0 	st.w	r7[-16],r8
80000eb6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000eba:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000ebe:	91 19       	st.w	r8[0x4],r9
80000ec0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000ec4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000ec8:	91 69       	st.w	r8[0x18],r9
80000eca:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000ece:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000ed2:	91 a9       	st.w	r8[0x28],r9
80000ed4:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000ed8:	ef 48 ff e4 	st.w	r7[-28],r8
80000edc:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000ee0:	58 08       	cp.w	r8,0
80000ee2:	c0 60       	breq	80000eee <gpioInit+0x7a>
80000ee4:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000ee8:	58 18       	cp.w	r8,1
80000eea:	c0 90       	breq	80000efc <gpioInit+0x88>
80000eec:	c0 f8       	rjmp	80000f0a <gpioInit+0x96>
80000eee:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000ef2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000ef6:	f1 49 00 44 	st.w	r8[68],r9
80000efa:	c0 e8       	rjmp	80000f16 <gpioInit+0xa2>
80000efc:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000f00:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000f04:	f1 49 00 48 	st.w	r8[72],r9
80000f08:	c0 78       	rjmp	80000f16 <gpioInit+0xa2>
80000f0a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000f0e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000f12:	f1 49 00 48 	st.w	r8[72],r9
80000f16:	2f 9d       	sub	sp,-28
80000f18:	e3 cd 80 80 	ldm	sp++,r7,pc

80000f1c <gpioSet>:
80000f1c:	eb cd 40 80 	pushm	r7,lr
80000f20:	1a 97       	mov	r7,sp
80000f22:	20 5d       	sub	sp,20
80000f24:	ef 4c ff ec 	st.w	r7[-20],r12
80000f28:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000f2c:	a5 58       	asr	r8,0x5
80000f2e:	ef 48 ff f4 	st.w	r7[-12],r8
80000f32:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000f36:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000f3a:	ef 48 ff fc 	st.w	r7[-4],r8
80000f3e:	30 19       	mov	r9,1
80000f40:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000f44:	f2 08 09 48 	lsl	r8,r9,r8
80000f48:	ef 48 ff f8 	st.w	r7[-8],r8
80000f4c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000f50:	a9 68       	lsl	r8,0x8
80000f52:	e0 28 f0 00 	sub	r8,61440
80000f56:	ef 48 ff f0 	st.w	r7[-16],r8
80000f5a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000f5e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000f62:	f1 49 00 54 	st.w	r8[84],r9
80000f66:	2f bd       	sub	sp,-20
80000f68:	e3 cd 80 80 	ldm	sp++,r7,pc

80000f6c <gpioToggle>:
80000f6c:	eb cd 40 80 	pushm	r7,lr
80000f70:	1a 97       	mov	r7,sp
80000f72:	20 5d       	sub	sp,20
80000f74:	ef 4c ff ec 	st.w	r7[-20],r12
80000f78:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000f7c:	a5 58       	asr	r8,0x5
80000f7e:	ef 48 ff f4 	st.w	r7[-12],r8
80000f82:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000f86:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000f8a:	ef 48 ff fc 	st.w	r7[-4],r8
80000f8e:	30 19       	mov	r9,1
80000f90:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000f94:	f2 08 09 48 	lsl	r8,r9,r8
80000f98:	ef 48 ff f8 	st.w	r7[-8],r8
80000f9c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000fa0:	a9 68       	lsl	r8,0x8
80000fa2:	e0 28 f0 00 	sub	r8,61440
80000fa6:	ef 48 ff f0 	st.w	r7[-16],r8
80000faa:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000fae:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000fb2:	f1 49 00 5c 	st.w	r8[92],r9
80000fb6:	2f bd       	sub	sp,-20
80000fb8:	e3 cd 80 80 	ldm	sp++,r7,pc

80000fbc <gpioGet>:
80000fbc:	eb cd 40 80 	pushm	r7,lr
80000fc0:	1a 97       	mov	r7,sp
80000fc2:	20 5d       	sub	sp,20
80000fc4:	ef 4c ff ec 	st.w	r7[-20],r12
80000fc8:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000fcc:	a5 58       	asr	r8,0x5
80000fce:	ef 48 ff f4 	st.w	r7[-12],r8
80000fd2:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000fd6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000fda:	ef 48 ff fc 	st.w	r7[-4],r8
80000fde:	30 19       	mov	r9,1
80000fe0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000fe4:	f2 08 09 48 	lsl	r8,r9,r8
80000fe8:	ef 48 ff f8 	st.w	r7[-8],r8
80000fec:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000ff0:	a9 68       	lsl	r8,0x8
80000ff2:	e0 28 f0 00 	sub	r8,61440
80000ff6:	ef 48 ff f0 	st.w	r7[-16],r8
80000ffa:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000ffe:	71 89       	ld.w	r9,r8[0x60]
80001000:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001004:	f3 e8 00 08 	and	r8,r9,r8
80001008:	10 9c       	mov	r12,r8
8000100a:	2f bd       	sub	sp,-20
8000100c:	e3 cd 80 80 	ldm	sp++,r7,pc

80001010 <ledInit>:
80001010:	eb cd 40 80 	pushm	r7,lr
80001014:	1a 97       	mov	r7,sp
80001016:	20 9d       	sub	sp,36
80001018:	49 e8       	lddpc	r8,80001090 <ledInit+0x80>
8000101a:	ee cb 00 24 	sub	r11,r7,36
8000101e:	10 9a       	mov	r10,r8
80001020:	f4 e8 00 00 	ld.d	r8,r10[0]
80001024:	f6 e9 00 00 	st.d	r11[0],r8
80001028:	f4 e8 00 08 	ld.d	r8,r10[8]
8000102c:	f6 e9 00 08 	st.d	r11[8],r8
80001030:	f4 e8 00 10 	ld.d	r8,r10[16]
80001034:	f6 e9 00 10 	st.d	r11[16],r8
80001038:	f4 e8 00 18 	ld.d	r8,r10[24]
8000103c:	f6 e9 00 18 	st.d	r11[24],r8
80001040:	30 08       	mov	r8,0
80001042:	ef 48 ff fc 	st.w	r7[-4],r8
80001046:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000104a:	a3 68       	lsl	r8,0x2
8000104c:	ee 08 00 08 	add	r8,r7,r8
80001050:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80001054:	10 9c       	mov	r12,r8
80001056:	f0 1f 00 10 	mcall	80001094 <ledInit+0x84>
8000105a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000105e:	a3 68       	lsl	r8,0x2
80001060:	ee 08 00 08 	add	r8,r7,r8
80001064:	f0 f8 ff dc 	ld.w	r8,r8[-36]
80001068:	30 0b       	mov	r11,0
8000106a:	10 9c       	mov	r12,r8
8000106c:	f0 1f 00 0b 	mcall	80001098 <ledInit+0x88>
80001070:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001074:	58 78       	cp.w	r8,7
80001076:	5f 18       	srne	r8
80001078:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000107c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001080:	2f f8       	sub	r8,-1
80001082:	ef 48 ff fc 	st.w	r7[-4],r8
80001086:	58 09       	cp.w	r9,0
80001088:	cd f1       	brne	80001046 <ledInit+0x36>
8000108a:	2f 7d       	sub	sp,-36
8000108c:	e3 cd 80 80 	ldm	sp++,r7,pc
80001090:	80 00       	ld.sh	r0,r0[0x0]
80001092:	22 00       	sub	r0,32
80001094:	80 00       	ld.sh	r0,r0[0x0]
80001096:	10 9c       	mov	r12,r8
80001098:	80 00       	ld.sh	r0,r0[0x0]
8000109a:	0e 74       	tst	r4,r7

8000109c <ledOff>:
8000109c:	eb cd 40 80 	pushm	r7,lr
800010a0:	1a 97       	mov	r7,sp
800010a2:	20 1d       	sub	sp,4
800010a4:	ef 4c ff fc 	st.w	r7[-4],r12
800010a8:	ee fc ff fc 	ld.w	r12,r7[-4]
800010ac:	f0 1f 00 03 	mcall	800010b8 <ledOff+0x1c>
800010b0:	2f fd       	sub	sp,-4
800010b2:	e3 cd 80 80 	ldm	sp++,r7,pc
800010b6:	00 00       	add	r0,r0
800010b8:	80 00       	ld.sh	r0,r0[0x0]
800010ba:	0f 1c       	ld.sh	r12,r7++

800010bc <ledToggle>:
800010bc:	eb cd 40 80 	pushm	r7,lr
800010c0:	1a 97       	mov	r7,sp
800010c2:	20 1d       	sub	sp,4
800010c4:	ef 4c ff fc 	st.w	r7[-4],r12
800010c8:	ee fc ff fc 	ld.w	r12,r7[-4]
800010cc:	f0 1f 00 03 	mcall	800010d8 <ledToggle+0x1c>
800010d0:	2f fd       	sub	sp,-4
800010d2:	e3 cd 80 80 	ldm	sp++,r7,pc
800010d6:	00 00       	add	r0,r0
800010d8:	80 00       	ld.sh	r0,r0[0x0]
800010da:	0f 6c       	ld.uh	r12,--r7

800010dc <potInit>:
800010dc:	d3 01       	pushm	r11-r12
800010de:	e0 6c 10 00 	mov	r12,4096
800010e2:	ea 1c ff ff 	orh	r12,0xffff
800010e6:	31 6b       	mov	r11,22
800010e8:	99 2b       	st.w	r12[0x8],r11
800010ea:	99 6b       	st.w	r12[0x18],r11
800010ec:	99 6b       	st.w	r12[0x18],r11
800010ee:	e0 6c 3c 00 	mov	r12,15360
800010f2:	ea 1c ff ff 	orh	r12,0xffff
800010f6:	30 1b       	mov	r11,1
800010f8:	99 0b       	st.w	r12[0x0],r11
800010fa:	e0 6b 0f 1f 	mov	r11,3871
800010fe:	b1 6b       	lsl	r11,0x10
80001100:	99 1b       	st.w	r12[0x4],r11
80001102:	30 2b       	mov	r11,2
80001104:	99 4b       	st.w	r12[0x10],r11
80001106:	d3 02       	popm	r11-r12
80001108:	1c 9f       	mov	pc,lr

8000110a <potGetValue>:
8000110a:	d1 81       	pushm	r10-r11
8000110c:	e0 6c 3c 00 	mov	r12,15360
80001110:	ea 1c ff ff 	orh	r12,0xffff
80001114:	30 2b       	mov	r11,2
80001116:	99 0b       	st.w	r12[0x0],r11

80001118 <a1>:
80001118:	78 7a       	ld.w	r10,r12[0x1c]
8000111a:	16 7a       	tst	r10,r11
8000111c:	cf e0       	breq	80001118 <a1>
8000111e:	78 dc       	ld.w	r12,r12[0x34]
80001120:	d1 82       	popm	r10-r11
80001122:	1c 9f       	mov	pc,lr

80001124 <usartReset>:
80001124:	eb cd 40 80 	pushm	r7,lr
80001128:	1a 97       	mov	r7,sp
8000112a:	20 3d       	sub	sp,12
8000112c:	ef 4c ff f8 	st.w	r7[-8],r12
80001130:	f0 1f 00 16 	mcall	80001188 <usartReset+0x64>
80001134:	18 98       	mov	r8,r12
80001136:	ef 48 ff fc 	st.w	r7[-4],r8
8000113a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000113e:	58 08       	cp.w	r8,0
80001140:	c0 30       	breq	80001146 <usartReset+0x22>
80001142:	f0 1f 00 13 	mcall	8000118c <usartReset+0x68>
80001146:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000114a:	3f f8       	mov	r8,-1
8000114c:	93 38       	st.w	r9[0xc],r8
8000114e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001152:	70 58       	ld.w	r8,r8[0x14]
80001154:	ee f8 ff fc 	ld.w	r8,r7[-4]
80001158:	58 08       	cp.w	r8,0
8000115a:	c0 30       	breq	80001160 <usartReset+0x3c>
8000115c:	f0 1f 00 0d 	mcall	80001190 <usartReset+0x6c>
80001160:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001164:	30 08       	mov	r8,0
80001166:	93 18       	st.w	r9[0x4],r8
80001168:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000116c:	30 08       	mov	r8,0
8000116e:	93 98       	st.w	r9[0x24],r8
80001170:	ee f9 ff f8 	ld.w	r9,r7[-8]
80001174:	30 08       	mov	r8,0
80001176:	93 a8       	st.w	r9[0x28],r8
80001178:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000117c:	ea 68 61 0c 	mov	r8,680204
80001180:	93 08       	st.w	r9[0x0],r8
80001182:	2f dd       	sub	sp,-12
80001184:	e3 cd 80 80 	ldm	sp++,r7,pc
80001188:	80 00       	ld.sh	r0,r0[0x0]
8000118a:	1f 6e       	ld.uh	lr,--pc
8000118c:	80 00       	ld.sh	r0,r0[0x0]
8000118e:	1f 66       	ld.uh	r6,--pc
80001190:	80 00       	ld.sh	r0,r0[0x0]
80001192:	1f 6a       	ld.uh	r10,--pc

80001194 <usartSetBaudrate>:
80001194:	eb cd 40 80 	pushm	r7,lr
80001198:	1a 97       	mov	r7,sp
8000119a:	20 bd       	sub	sp,44
8000119c:	ef 4c ff ec 	st.w	r7[-20],r12
800011a0:	ef 4b ff e8 	st.w	r7[-24],r11
800011a4:	ef 4a ff e4 	st.w	r7[-28],r10
800011a8:	ee f8 ff e8 	ld.w	r8,r7[-24]
800011ac:	f0 09 15 04 	lsl	r9,r8,0x4
800011b0:	ee f8 ff e4 	ld.w	r8,r7[-28]
800011b4:	10 39       	cp.w	r9,r8
800011b6:	e0 8b 00 06 	brhi	800011c2 <usartSetBaudrate+0x2e>
800011ba:	31 09       	mov	r9,16
800011bc:	ef 49 ff d4 	st.w	r7[-44],r9
800011c0:	c0 48       	rjmp	800011c8 <usartSetBaudrate+0x34>
800011c2:	30 88       	mov	r8,8
800011c4:	ef 48 ff d4 	st.w	r7[-44],r8
800011c8:	ee f9 ff d4 	ld.w	r9,r7[-44]
800011cc:	ef 49 ff f0 	st.w	r7[-16],r9
800011d0:	ee f8 ff e4 	ld.w	r8,r7[-28]
800011d4:	f0 0a 15 03 	lsl	r10,r8,0x3
800011d8:	ee f9 ff f0 	ld.w	r9,r7[-16]
800011dc:	ee f8 ff e8 	ld.w	r8,r7[-24]
800011e0:	f2 08 02 48 	mul	r8,r9,r8
800011e4:	a1 98       	lsr	r8,0x1
800011e6:	10 0a       	add	r10,r8
800011e8:	ee f9 ff f0 	ld.w	r9,r7[-16]
800011ec:	ee f8 ff e8 	ld.w	r8,r7[-24]
800011f0:	f2 08 02 48 	mul	r8,r9,r8
800011f4:	f4 08 0d 08 	divu	r8,r10,r8
800011f8:	ef 48 ff f4 	st.w	r7[-12],r8
800011fc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001200:	a3 98       	lsr	r8,0x3
80001202:	ef 48 ff f8 	st.w	r7[-8],r8
80001206:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000120a:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
8000120e:	ef 48 ff fc 	st.w	r7[-4],r8
80001212:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001216:	58 08       	cp.w	r8,0
80001218:	c0 70       	breq	80001226 <usartSetBaudrate+0x92>
8000121a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000121e:	e0 48 ff ff 	cp.w	r8,65535
80001222:	e0 88 00 06 	brls	8000122e <usartSetBaudrate+0x9a>
80001226:	30 18       	mov	r8,1
80001228:	ef 48 ff d8 	st.w	r7[-40],r8
8000122c:	c2 c8       	rjmp	80001284 <usartSetBaudrate+0xf0>
8000122e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001232:	70 18       	ld.w	r8,r8[0x4]
80001234:	10 99       	mov	r9,r8
80001236:	e4 19 ff f7 	andh	r9,0xfff7
8000123a:	e0 19 fe cf 	andl	r9,0xfecf
8000123e:	ef 49 ff dc 	st.w	r7[-36],r9
80001242:	ee f8 ff f0 	ld.w	r8,r7[-16]
80001246:	59 08       	cp.w	r8,16
80001248:	c0 60       	breq	80001254 <usartSetBaudrate+0xc0>
8000124a:	e8 68 00 00 	mov	r8,524288
8000124e:	ef 48 ff e0 	st.w	r7[-32],r8
80001252:	c0 48       	rjmp	8000125a <usartSetBaudrate+0xc6>
80001254:	30 09       	mov	r9,0
80001256:	ef 49 ff e0 	st.w	r7[-32],r9
8000125a:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000125e:	ee f8 ff e0 	ld.w	r8,r7[-32]
80001262:	10 49       	or	r9,r8
80001264:	ee f8 ff ec 	ld.w	r8,r7[-20]
80001268:	91 19       	st.w	r8[0x4],r9
8000126a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000126e:	f0 09 15 10 	lsl	r9,r8,0x10
80001272:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001276:	10 49       	or	r9,r8
80001278:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000127c:	91 89       	st.w	r8[0x20],r9
8000127e:	30 09       	mov	r9,0
80001280:	ef 49 ff d8 	st.w	r7[-40],r9
80001284:	ee f8 ff d8 	ld.w	r8,r7[-40]
80001288:	10 9c       	mov	r12,r8
8000128a:	2f 5d       	sub	sp,-44
8000128c:	e3 cd 80 80 	ldm	sp++,r7,pc

80001290 <usartInit>:
80001290:	eb cd 40 80 	pushm	r7,lr
80001294:	1a 97       	mov	r7,sp
80001296:	20 4d       	sub	sp,16
80001298:	ef 4c ff f8 	st.w	r7[-8],r12
8000129c:	ef 4b ff f4 	st.w	r7[-12],r11
800012a0:	ef 4a ff f0 	st.w	r7[-16],r10
800012a4:	fe 78 10 00 	mov	r8,-61440
800012a8:	ef 48 ff fc 	st.w	r7[-4],r8
800012ac:	ee f9 ff fc 	ld.w	r9,r7[-4]
800012b0:	30 18       	mov	r8,1
800012b2:	93 28       	st.w	r9[0x8],r8
800012b4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800012b8:	30 28       	mov	r8,2
800012ba:	93 28       	st.w	r9[0x8],r8
800012bc:	ee fc ff f8 	ld.w	r12,r7[-8]
800012c0:	f0 1f 00 3b 	mcall	800013ac <usartInit+0x11c>
800012c4:	ee f9 ff f0 	ld.w	r9,r7[-16]
800012c8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800012cc:	70 08       	ld.w	r8,r8[0x0]
800012ce:	12 9a       	mov	r10,r9
800012d0:	10 9b       	mov	r11,r8
800012d2:	ee fc ff f8 	ld.w	r12,r7[-8]
800012d6:	f0 1f 00 37 	mcall	800013b0 <usartInit+0x120>
800012da:	ee f8 ff f4 	ld.w	r8,r7[-12]
800012de:	11 c9       	ld.ub	r9,r8[0x4]
800012e0:	30 98       	mov	r8,9
800012e2:	f0 09 18 00 	cp.b	r9,r8
800012e6:	c0 a1       	brne	800012fa <usartInit+0x6a>
800012e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800012ec:	70 18       	ld.w	r8,r8[0x4]
800012ee:	10 99       	mov	r9,r8
800012f0:	b1 b9       	sbr	r9,0x11
800012f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800012f6:	91 19       	st.w	r8[0x4],r9
800012f8:	c0 d8       	rjmp	80001312 <usartInit+0x82>
800012fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800012fe:	70 19       	ld.w	r9,r8[0x4]
80001300:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001304:	11 c8       	ld.ub	r8,r8[0x4]
80001306:	20 58       	sub	r8,5
80001308:	a7 68       	lsl	r8,0x6
8000130a:	10 49       	or	r9,r8
8000130c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001310:	91 19       	st.w	r8[0x4],r9
80001312:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001316:	70 1a       	ld.w	r10,r8[0x4]
80001318:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000131c:	11 d8       	ld.ub	r8,r8[0x5]
8000131e:	f0 09 15 09 	lsl	r9,r8,0x9
80001322:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001326:	f1 38 00 08 	ld.ub	r8,r8[8]
8000132a:	af 68       	lsl	r8,0xe
8000132c:	f3 e8 10 08 	or	r8,r9,r8
80001330:	f5 e8 10 09 	or	r9,r10,r8
80001334:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001338:	91 19       	st.w	r8[0x4],r9
8000133a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000133e:	90 39       	ld.sh	r9,r8[0x6]
80001340:	30 28       	mov	r8,2
80001342:	f0 09 19 00 	cp.h	r9,r8
80001346:	e0 88 00 14 	brls	8000136e <usartInit+0xde>
8000134a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000134e:	70 18       	ld.w	r8,r8[0x4]
80001350:	10 99       	mov	r9,r8
80001352:	ad b9       	sbr	r9,0xd
80001354:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001358:	91 19       	st.w	r8[0x4],r9
8000135a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000135e:	90 38       	ld.sh	r8,r8[0x6]
80001360:	5c 78       	castu.h	r8
80001362:	20 28       	sub	r8,2
80001364:	10 99       	mov	r9,r8
80001366:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000136a:	91 a9       	st.w	r8[0x28],r9
8000136c:	c0 d8       	rjmp	80001386 <usartInit+0xf6>
8000136e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001372:	70 19       	ld.w	r9,r8[0x4]
80001374:	ee f8 ff f4 	ld.w	r8,r7[-12]
80001378:	90 38       	ld.sh	r8,r8[0x6]
8000137a:	5c 78       	castu.h	r8
8000137c:	ad 68       	lsl	r8,0xc
8000137e:	10 49       	or	r9,r8
80001380:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001384:	91 19       	st.w	r8[0x4],r9
80001386:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000138a:	70 18       	ld.w	r8,r8[0x4]
8000138c:	10 99       	mov	r9,r8
8000138e:	e0 19 ff f0 	andl	r9,0xfff0
80001392:	ee f8 ff f8 	ld.w	r8,r7[-8]
80001396:	91 19       	st.w	r8[0x4],r9
80001398:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000139c:	35 08       	mov	r8,80
8000139e:	93 08       	st.w	r9[0x0],r8
800013a0:	30 08       	mov	r8,0
800013a2:	10 9c       	mov	r12,r8
800013a4:	2f cd       	sub	sp,-16
800013a6:	e3 cd 80 80 	ldm	sp++,r7,pc
800013aa:	00 00       	add	r0,r0
800013ac:	80 00       	ld.sh	r0,r0[0x0]
800013ae:	11 24       	ld.uh	r4,r8++
800013b0:	80 00       	ld.sh	r0,r0[0x0]
800013b2:	11 94       	ld.ub	r4,r8[0x1]

800013b4 <timerInit>:
800013b4:	d5 01       	pushm	r11,lr
800013b6:	d2 01       	pushm	r12
800013b8:	f0 1f 00 28 	mcall	80001458 <timerClearInterrupt+0x10>
800013bc:	f0 1f 00 28 	mcall	8000145c <timerClearInterrupt+0x14>
800013c0:	e0 6c 38 00 	mov	r12,14336
800013c4:	ea 1c ff ff 	orh	r12,0xffff
800013c8:	e0 6b c0 00 	mov	r11,49152
800013cc:	ea 1b 00 00 	orh	r11,0x0
800013d0:	99 1b       	st.w	r12[0x4],r11
800013d2:	30 1b       	mov	r11,1
800013d4:	a5 6b       	lsl	r11,0x4
800013d6:	99 9b       	st.w	r12[0x24],r11
800013d8:	d2 02       	popm	r12
800013da:	f0 1f 00 22 	mcall	80001460 <timerClearInterrupt+0x18>
800013de:	d5 02       	popm	r11,lr
800013e0:	1c 9f       	mov	pc,lr

800013e2 <timerReset>:
800013e2:	d3 01       	pushm	r11-r12
800013e4:	e0 6c 38 00 	mov	r12,14336
800013e8:	ea 1c ff ff 	orh	r12,0xffff
800013ec:	30 5b       	mov	r11,5
800013ee:	99 0b       	st.w	r12[0x0],r11
800013f0:	e0 6b 00 08 	mov	r11,8
800013f4:	ea 1b 00 00 	orh	r11,0x0
800013f8:	76 0b       	ld.w	r11,r11[0x0]
800013fa:	99 7b       	st.w	r12[0x1c],r11
800013fc:	d3 02       	popm	r11-r12
800013fe:	1c 9f       	mov	pc,lr

80001400 <timerStop>:
80001400:	d3 01       	pushm	r11-r12
80001402:	e0 6c 38 00 	mov	r12,14336
80001406:	ea 1c ff ff 	orh	r12,0xffff
8000140a:	30 2b       	mov	r11,2
8000140c:	99 0b       	st.w	r12[0x0],r11
8000140e:	d3 02       	popm	r11-r12
80001410:	1c 9f       	mov	pc,lr

80001412 <timerRCSet>:
80001412:	d3 01       	pushm	r11-r12
80001414:	49 4b       	lddpc	r11,80001464 <timerClearInterrupt+0x1c>
80001416:	97 0c       	st.w	r11[0x0],r12
80001418:	e0 6c 38 00 	mov	r12,14336
8000141c:	ea 1c ff ff 	orh	r12,0xffff
80001420:	76 0b       	ld.w	r11,r11[0x0]
80001422:	99 7b       	st.w	r12[0x1c],r11
80001424:	d3 02       	popm	r11-r12
80001426:	1c 9f       	mov	pc,lr

80001428 <timerPrescaleSet>:
80001428:	d3 81       	pushm	r10-r12
8000142a:	49 0b       	lddpc	r11,80001468 <timerClearInterrupt+0x20>
8000142c:	97 0c       	st.w	r11[0x0],r12
8000142e:	e0 6c 38 00 	mov	r12,14336
80001432:	ea 1c ff ff 	orh	r12,0xffff
80001436:	78 1a       	ld.w	r10,r12[0x4]
80001438:	3f 8b       	mov	r11,-8
8000143a:	16 6a       	and	r10,r11
8000143c:	48 bb       	lddpc	r11,80001468 <timerClearInterrupt+0x20>
8000143e:	76 0b       	ld.w	r11,r11[0x0]
80001440:	14 4b       	or	r11,r10
80001442:	99 1b       	st.w	r12[0x4],r11
80001444:	d3 82       	popm	r10-r12
80001446:	1c 9f       	mov	pc,lr

80001448 <timerClearInterrupt>:
80001448:	d2 01       	pushm	r12
8000144a:	e0 6c 38 00 	mov	r12,14336
8000144e:	ea 1c ff ff 	orh	r12,0xffff
80001452:	78 8c       	ld.w	r12,r12[0x20]
80001454:	d2 02       	popm	r12
80001456:	1c 9f       	mov	pc,lr
80001458:	80 00       	ld.sh	r0,r0[0x0]
8000145a:	1f 66       	ld.uh	r6,--pc
8000145c:	80 00       	ld.sh	r0,r0[0x0]
8000145e:	14 48       	or	r8,r10
80001460:	80 00       	ld.sh	r0,r0[0x0]
80001462:	0c 04       	add	r4,r6
80001464:	00 00       	add	r0,r0
80001466:	00 08       	add	r8,r0
80001468:	00 00       	add	r0,r0
8000146a:	00 0c       	add	r12,r0

8000146c <_stext>:
8000146c:	49 7d       	lddpc	sp,800014c8 <udata_end+0x4>
8000146e:	49 80       	lddpc	r0,800014cc <udata_end+0x8>
80001470:	1a d0       	st.w	--sp,r0
80001472:	e5 cd 20 00 	ldmts	sp,sp
80001476:	1b 00       	ld.w	r0,sp++
80001478:	49 60       	lddpc	r0,800014d0 <udata_end+0xc>
8000147a:	e3 b0 00 01 	mtsr	0x4,r0
8000147e:	d5 53       	csrf	0x15
80001480:	e0 6c 0c 00 	mov	r12,3072
80001484:	ea 1c ff ff 	orh	r12,0xffff
80001488:	e0 6b 01 07 	mov	r11,263
8000148c:	99 ab       	st.w	r12[0x28],r11
8000148e:	30 4b       	mov	r11,4
80001490:	99 0b       	st.w	r12[0x0],r11
80001492:	e0 6a 00 80 	mov	r10,128

80001496 <xw8>:
80001496:	79 5b       	ld.w	r11,r12[0x54]
80001498:	14 7b       	tst	r11,r10
8000149a:	cf e0       	breq	80001496 <xw8>
8000149c:	30 5b       	mov	r11,5
8000149e:	99 0b       	st.w	r12[0x0],r11

800014a0 <idata_>:
800014a0:	48 d0       	lddpc	r0,800014d4 <udata_end+0x10>
800014a2:	48 e1       	lddpc	r1,800014d8 <udata_end+0x14>
800014a4:	02 30       	cp.w	r0,r1
800014a6:	c0 62       	brcc	800014b2 <idata_end>
800014a8:	48 d2       	lddpc	r2,800014dc <udata_end+0x18>

800014aa <idata_loop>:
800014aa:	05 04       	ld.w	r4,r2++
800014ac:	00 a4       	st.w	r0++,r4
800014ae:	02 30       	cp.w	r0,r1
800014b0:	cf d3       	brcs	800014aa <idata_loop>

800014b2 <idata_end>:
800014b2:	48 c0       	lddpc	r0,800014e0 <udata_end+0x1c>
800014b4:	48 c1       	lddpc	r1,800014e4 <udata_end+0x20>
800014b6:	02 30       	cp.w	r0,r1
800014b8:	c0 62       	brcc	800014c4 <udata_end>
800014ba:	30 02       	mov	r2,0
800014bc:	30 03       	mov	r3,0

800014be <udata_loop>:
800014be:	00 a2       	st.w	r0++,r2
800014c0:	02 30       	cp.w	r0,r1
800014c2:	cf e3       	brcs	800014be <udata_loop>

800014c4 <udata_end>:
800014c4:	48 9f       	lddpc	pc,800014e8 <udata_end+0x24>
800014c6:	00 00       	add	r0,r0
800014c8:	00 01       	add	r1,r0
800014ca:	00 00       	add	r0,r0
800014cc:	00 00       	add	r0,r0
800014ce:	f0 00       	*unknown*
800014d0:	80 00       	ld.sh	r0,r0[0x0]
800014d2:	1e 00       	add	r0,pc
800014d4:	00 00       	add	r0,r0
800014d6:	00 08       	add	r8,r0
800014d8:	00 00       	add	r0,r0
800014da:	05 18       	ld.sh	r8,r2++
800014dc:	80 00       	ld.sh	r0,r0[0x0]
800014de:	22 88       	sub	r8,40
800014e0:	00 00       	add	r0,r0
800014e2:	05 18       	ld.sh	r8,r2++
800014e4:	00 00       	add	r0,r0
800014e6:	05 d8       	ld.ub	r8,r2[0x5]
800014e8:	80 00       	ld.sh	r0,r0[0x0]
800014ea:	00 ec       	st.h	--r0,r12

800014ec <free>:
800014ec:	d4 01       	pushm	lr
800014ee:	48 48       	lddpc	r8,800014fc <free+0x10>
800014f0:	18 9b       	mov	r11,r12
800014f2:	70 0c       	ld.w	r12,r8[0x0]
800014f4:	f0 1f 00 03 	mcall	80001500 <free+0x14>
800014f8:	d8 02       	popm	pc
800014fa:	00 00       	add	r0,r0
800014fc:	00 00       	add	r0,r0
800014fe:	05 10       	ld.sh	r0,r2++
80001500:	80 00       	ld.sh	r0,r0[0x0]
80001502:	1a 8c       	andn	r12,sp

80001504 <malloc>:
80001504:	d4 01       	pushm	lr
80001506:	48 48       	lddpc	r8,80001514 <malloc+0x10>
80001508:	18 9b       	mov	r11,r12
8000150a:	70 0c       	ld.w	r12,r8[0x0]
8000150c:	f0 1f 00 03 	mcall	80001518 <malloc+0x14>
80001510:	d8 02       	popm	pc
80001512:	00 00       	add	r0,r0
80001514:	00 00       	add	r0,r0
80001516:	05 10       	ld.sh	r0,r2++
80001518:	80 00       	ld.sh	r0,r0[0x0]
8000151a:	15 1c       	ld.sh	r12,r10++

8000151c <_malloc_r>:
8000151c:	d4 31       	pushm	r0-r7,lr
8000151e:	f6 c8 ff f5 	sub	r8,r11,-11
80001522:	18 95       	mov	r5,r12
80001524:	10 97       	mov	r7,r8
80001526:	e0 17 ff f8 	andl	r7,0xfff8
8000152a:	59 68       	cp.w	r8,22
8000152c:	f9 b7 08 10 	movls	r7,16
80001530:	16 37       	cp.w	r7,r11
80001532:	5f 38       	srlo	r8
80001534:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80001538:	c0 50       	breq	80001542 <_malloc_r+0x26>
8000153a:	30 c8       	mov	r8,12
8000153c:	99 38       	st.w	r12[0xc],r8
8000153e:	e0 8f 01 f3 	bral	80001924 <_malloc_r+0x408>
80001542:	f0 1f 00 50 	mcall	80001680 <_malloc_r+0x164>
80001546:	e0 47 01 f7 	cp.w	r7,503
8000154a:	e0 8b 00 1c 	brhi	80001582 <_malloc_r+0x66>
8000154e:	ee 03 16 03 	lsr	r3,r7,0x3
80001552:	4c d8       	lddpc	r8,80001684 <_malloc_r+0x168>
80001554:	f0 03 00 38 	add	r8,r8,r3<<0x3
80001558:	70 36       	ld.w	r6,r8[0xc]
8000155a:	10 36       	cp.w	r6,r8
8000155c:	c0 61       	brne	80001568 <_malloc_r+0x4c>
8000155e:	ec c8 ff f8 	sub	r8,r6,-8
80001562:	70 36       	ld.w	r6,r8[0xc]
80001564:	10 36       	cp.w	r6,r8
80001566:	c0 c0       	breq	8000157e <_malloc_r+0x62>
80001568:	6c 18       	ld.w	r8,r6[0x4]
8000156a:	e0 18 ff fc 	andl	r8,0xfffc
8000156e:	6c 3a       	ld.w	r10,r6[0xc]
80001570:	ec 08 00 09 	add	r9,r6,r8
80001574:	0a 9c       	mov	r12,r5
80001576:	6c 28       	ld.w	r8,r6[0x8]
80001578:	95 28       	st.w	r10[0x8],r8
8000157a:	91 3a       	st.w	r8[0xc],r10
8000157c:	c4 68       	rjmp	80001608 <_malloc_r+0xec>
8000157e:	2f e3       	sub	r3,-2
80001580:	c4 c8       	rjmp	80001618 <_malloc_r+0xfc>
80001582:	ee 03 16 09 	lsr	r3,r7,0x9
80001586:	c0 41       	brne	8000158e <_malloc_r+0x72>
80001588:	ee 03 16 03 	lsr	r3,r7,0x3
8000158c:	c2 68       	rjmp	800015d8 <_malloc_r+0xbc>
8000158e:	58 43       	cp.w	r3,4
80001590:	e0 8b 00 06 	brhi	8000159c <_malloc_r+0x80>
80001594:	ee 03 16 06 	lsr	r3,r7,0x6
80001598:	2c 83       	sub	r3,-56
8000159a:	c1 f8       	rjmp	800015d8 <_malloc_r+0xbc>
8000159c:	59 43       	cp.w	r3,20
8000159e:	e0 8b 00 04 	brhi	800015a6 <_malloc_r+0x8a>
800015a2:	2a 53       	sub	r3,-91
800015a4:	c1 a8       	rjmp	800015d8 <_malloc_r+0xbc>
800015a6:	e0 43 00 54 	cp.w	r3,84
800015aa:	e0 8b 00 06 	brhi	800015b6 <_malloc_r+0x9a>
800015ae:	ee 03 16 0c 	lsr	r3,r7,0xc
800015b2:	29 23       	sub	r3,-110
800015b4:	c1 28       	rjmp	800015d8 <_malloc_r+0xbc>
800015b6:	e0 43 01 54 	cp.w	r3,340
800015ba:	e0 8b 00 06 	brhi	800015c6 <_malloc_r+0xaa>
800015be:	ee 03 16 0f 	lsr	r3,r7,0xf
800015c2:	28 93       	sub	r3,-119
800015c4:	c0 a8       	rjmp	800015d8 <_malloc_r+0xbc>
800015c6:	e0 43 05 54 	cp.w	r3,1364
800015ca:	e0 88 00 04 	brls	800015d2 <_malloc_r+0xb6>
800015ce:	37 e3       	mov	r3,126
800015d0:	c0 48       	rjmp	800015d8 <_malloc_r+0xbc>
800015d2:	ee 03 16 12 	lsr	r3,r7,0x12
800015d6:	28 43       	sub	r3,-124
800015d8:	4a ba       	lddpc	r10,80001684 <_malloc_r+0x168>
800015da:	f4 03 00 3a 	add	r10,r10,r3<<0x3
800015de:	74 36       	ld.w	r6,r10[0xc]
800015e0:	c1 98       	rjmp	80001612 <_malloc_r+0xf6>
800015e2:	6c 19       	ld.w	r9,r6[0x4]
800015e4:	e0 19 ff fc 	andl	r9,0xfffc
800015e8:	f2 07 01 0b 	sub	r11,r9,r7
800015ec:	58 fb       	cp.w	r11,15
800015ee:	e0 8a 00 04 	brle	800015f6 <_malloc_r+0xda>
800015f2:	20 13       	sub	r3,1
800015f4:	c1 18       	rjmp	80001616 <_malloc_r+0xfa>
800015f6:	6c 38       	ld.w	r8,r6[0xc]
800015f8:	58 0b       	cp.w	r11,0
800015fa:	c0 b5       	brlt	80001610 <_malloc_r+0xf4>
800015fc:	6c 2a       	ld.w	r10,r6[0x8]
800015fe:	ec 09 00 09 	add	r9,r6,r9
80001602:	0a 9c       	mov	r12,r5
80001604:	91 2a       	st.w	r8[0x8],r10
80001606:	95 38       	st.w	r10[0xc],r8
80001608:	72 18       	ld.w	r8,r9[0x4]
8000160a:	a1 a8       	sbr	r8,0x0
8000160c:	93 18       	st.w	r9[0x4],r8
8000160e:	cb c8       	rjmp	80001786 <_malloc_r+0x26a>
80001610:	10 96       	mov	r6,r8
80001612:	14 36       	cp.w	r6,r10
80001614:	ce 71       	brne	800015e2 <_malloc_r+0xc6>
80001616:	2f f3       	sub	r3,-1
80001618:	49 ba       	lddpc	r10,80001684 <_malloc_r+0x168>
8000161a:	f4 cc ff f8 	sub	r12,r10,-8
8000161e:	78 26       	ld.w	r6,r12[0x8]
80001620:	18 36       	cp.w	r6,r12
80001622:	c6 e0       	breq	800016fe <_malloc_r+0x1e2>
80001624:	6c 19       	ld.w	r9,r6[0x4]
80001626:	e0 19 ff fc 	andl	r9,0xfffc
8000162a:	f2 07 01 08 	sub	r8,r9,r7
8000162e:	58 f8       	cp.w	r8,15
80001630:	e0 89 00 90 	brgt	80001750 <_malloc_r+0x234>
80001634:	99 3c       	st.w	r12[0xc],r12
80001636:	99 2c       	st.w	r12[0x8],r12
80001638:	58 08       	cp.w	r8,0
8000163a:	c0 55       	brlt	80001644 <_malloc_r+0x128>
8000163c:	ec 09 00 09 	add	r9,r6,r9
80001640:	0a 9c       	mov	r12,r5
80001642:	ce 3b       	rjmp	80001608 <_malloc_r+0xec>
80001644:	e0 49 01 ff 	cp.w	r9,511
80001648:	e0 8b 00 13 	brhi	8000166e <_malloc_r+0x152>
8000164c:	a3 99       	lsr	r9,0x3
8000164e:	f4 09 00 38 	add	r8,r10,r9<<0x3
80001652:	70 2b       	ld.w	r11,r8[0x8]
80001654:	8d 38       	st.w	r6[0xc],r8
80001656:	8d 2b       	st.w	r6[0x8],r11
80001658:	97 36       	st.w	r11[0xc],r6
8000165a:	91 26       	st.w	r8[0x8],r6
8000165c:	a3 49       	asr	r9,0x2
8000165e:	74 18       	ld.w	r8,r10[0x4]
80001660:	30 1b       	mov	r11,1
80001662:	f6 09 09 49 	lsl	r9,r11,r9
80001666:	f1 e9 10 09 	or	r9,r8,r9
8000166a:	95 19       	st.w	r10[0x4],r9
8000166c:	c4 98       	rjmp	800016fe <_malloc_r+0x1e2>
8000166e:	f2 0a 16 09 	lsr	r10,r9,0x9
80001672:	58 4a       	cp.w	r10,4
80001674:	e0 8b 00 0a 	brhi	80001688 <_malloc_r+0x16c>
80001678:	f2 0a 16 06 	lsr	r10,r9,0x6
8000167c:	2c 8a       	sub	r10,-56
8000167e:	c2 38       	rjmp	800016c4 <_malloc_r+0x1a8>
80001680:	80 00       	ld.sh	r0,r0[0x0]
80001682:	19 6c       	ld.uh	r12,--r12
80001684:	00 00       	add	r0,r0
80001686:	00 10       	sub	r0,r0
80001688:	59 4a       	cp.w	r10,20
8000168a:	e0 8b 00 04 	brhi	80001692 <_malloc_r+0x176>
8000168e:	2a 5a       	sub	r10,-91
80001690:	c1 a8       	rjmp	800016c4 <_malloc_r+0x1a8>
80001692:	e0 4a 00 54 	cp.w	r10,84
80001696:	e0 8b 00 06 	brhi	800016a2 <_malloc_r+0x186>
8000169a:	f2 0a 16 0c 	lsr	r10,r9,0xc
8000169e:	29 2a       	sub	r10,-110
800016a0:	c1 28       	rjmp	800016c4 <_malloc_r+0x1a8>
800016a2:	e0 4a 01 54 	cp.w	r10,340
800016a6:	e0 8b 00 06 	brhi	800016b2 <_malloc_r+0x196>
800016aa:	f2 0a 16 0f 	lsr	r10,r9,0xf
800016ae:	28 9a       	sub	r10,-119
800016b0:	c0 a8       	rjmp	800016c4 <_malloc_r+0x1a8>
800016b2:	e0 4a 05 54 	cp.w	r10,1364
800016b6:	e0 88 00 04 	brls	800016be <_malloc_r+0x1a2>
800016ba:	37 ea       	mov	r10,126
800016bc:	c0 48       	rjmp	800016c4 <_malloc_r+0x1a8>
800016be:	f2 0a 16 12 	lsr	r10,r9,0x12
800016c2:	28 4a       	sub	r10,-124
800016c4:	4c 8b       	lddpc	r11,800017e4 <_malloc_r+0x2c8>
800016c6:	f6 0a 00 34 	add	r4,r11,r10<<0x3
800016ca:	68 28       	ld.w	r8,r4[0x8]
800016cc:	08 38       	cp.w	r8,r4
800016ce:	c0 e1       	brne	800016ea <_malloc_r+0x1ce>
800016d0:	76 19       	ld.w	r9,r11[0x4]
800016d2:	a3 4a       	asr	r10,0x2
800016d4:	30 1e       	mov	lr,1
800016d6:	fc 0a 09 4a 	lsl	r10,lr,r10
800016da:	f3 ea 10 0a 	or	r10,r9,r10
800016de:	10 99       	mov	r9,r8
800016e0:	97 1a       	st.w	r11[0x4],r10
800016e2:	c0 a8       	rjmp	800016f6 <_malloc_r+0x1da>
800016e4:	70 28       	ld.w	r8,r8[0x8]
800016e6:	08 38       	cp.w	r8,r4
800016e8:	c0 60       	breq	800016f4 <_malloc_r+0x1d8>
800016ea:	70 1a       	ld.w	r10,r8[0x4]
800016ec:	e0 1a ff fc 	andl	r10,0xfffc
800016f0:	14 39       	cp.w	r9,r10
800016f2:	cf 93       	brcs	800016e4 <_malloc_r+0x1c8>
800016f4:	70 39       	ld.w	r9,r8[0xc]
800016f6:	8d 39       	st.w	r6[0xc],r9
800016f8:	8d 28       	st.w	r6[0x8],r8
800016fa:	91 36       	st.w	r8[0xc],r6
800016fc:	93 26       	st.w	r9[0x8],r6
800016fe:	e6 08 14 02 	asr	r8,r3,0x2
80001702:	30 1b       	mov	r11,1
80001704:	4b 84       	lddpc	r4,800017e4 <_malloc_r+0x2c8>
80001706:	f6 08 09 4b 	lsl	r11,r11,r8
8000170a:	68 18       	ld.w	r8,r4[0x4]
8000170c:	10 3b       	cp.w	r11,r8
8000170e:	e0 8b 00 6f 	brhi	800017ec <_malloc_r+0x2d0>
80001712:	f7 e8 00 09 	and	r9,r11,r8
80001716:	c0 b1       	brne	8000172c <_malloc_r+0x210>
80001718:	e0 13 ff fc 	andl	r3,0xfffc
8000171c:	a1 7b       	lsl	r11,0x1
8000171e:	2f c3       	sub	r3,-4
80001720:	c0 38       	rjmp	80001726 <_malloc_r+0x20a>
80001722:	2f c3       	sub	r3,-4
80001724:	a1 7b       	lsl	r11,0x1
80001726:	f7 e8 00 09 	and	r9,r11,r8
8000172a:	cf c0       	breq	80001722 <_malloc_r+0x206>
8000172c:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80001730:	06 92       	mov	r2,r3
80001732:	1c 91       	mov	r1,lr
80001734:	62 36       	ld.w	r6,r1[0xc]
80001736:	c2 e8       	rjmp	80001792 <_malloc_r+0x276>
80001738:	6c 1a       	ld.w	r10,r6[0x4]
8000173a:	e0 1a ff fc 	andl	r10,0xfffc
8000173e:	f4 07 01 08 	sub	r8,r10,r7
80001742:	58 f8       	cp.w	r8,15
80001744:	e0 8a 00 15 	brle	8000176e <_malloc_r+0x252>
80001748:	6c 3a       	ld.w	r10,r6[0xc]
8000174a:	6c 29       	ld.w	r9,r6[0x8]
8000174c:	95 29       	st.w	r10[0x8],r9
8000174e:	93 3a       	st.w	r9[0xc],r10
80001750:	0e 99       	mov	r9,r7
80001752:	ec 07 00 07 	add	r7,r6,r7
80001756:	a1 a9       	sbr	r9,0x0
80001758:	99 37       	st.w	r12[0xc],r7
8000175a:	99 27       	st.w	r12[0x8],r7
8000175c:	8d 19       	st.w	r6[0x4],r9
8000175e:	ee 08 09 08 	st.w	r7[r8],r8
80001762:	8f 2c       	st.w	r7[0x8],r12
80001764:	8f 3c       	st.w	r7[0xc],r12
80001766:	a1 a8       	sbr	r8,0x0
80001768:	0a 9c       	mov	r12,r5
8000176a:	8f 18       	st.w	r7[0x4],r8
8000176c:	c0 d8       	rjmp	80001786 <_malloc_r+0x26a>
8000176e:	6c 39       	ld.w	r9,r6[0xc]
80001770:	58 08       	cp.w	r8,0
80001772:	c0 f5       	brlt	80001790 <_malloc_r+0x274>
80001774:	ec 0a 00 0a 	add	r10,r6,r10
80001778:	74 18       	ld.w	r8,r10[0x4]
8000177a:	a1 a8       	sbr	r8,0x0
8000177c:	0a 9c       	mov	r12,r5
8000177e:	95 18       	st.w	r10[0x4],r8
80001780:	6c 28       	ld.w	r8,r6[0x8]
80001782:	93 28       	st.w	r9[0x8],r8
80001784:	91 39       	st.w	r8[0xc],r9
80001786:	f0 1f 00 19 	mcall	800017e8 <_malloc_r+0x2cc>
8000178a:	ec cc ff f8 	sub	r12,r6,-8
8000178e:	d8 32       	popm	r0-r7,pc
80001790:	12 96       	mov	r6,r9
80001792:	02 36       	cp.w	r6,r1
80001794:	cd 21       	brne	80001738 <_malloc_r+0x21c>
80001796:	2f f2       	sub	r2,-1
80001798:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
8000179c:	c0 30       	breq	800017a2 <_malloc_r+0x286>
8000179e:	2f 81       	sub	r1,-8
800017a0:	cc ab       	rjmp	80001734 <_malloc_r+0x218>
800017a2:	1c 98       	mov	r8,lr
800017a4:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
800017a8:	c0 81       	brne	800017b8 <_malloc_r+0x29c>
800017aa:	68 19       	ld.w	r9,r4[0x4]
800017ac:	f6 08 11 ff 	rsub	r8,r11,-1
800017b0:	f3 e8 00 08 	and	r8,r9,r8
800017b4:	89 18       	st.w	r4[0x4],r8
800017b6:	c0 78       	rjmp	800017c4 <_malloc_r+0x2a8>
800017b8:	f0 c9 00 08 	sub	r9,r8,8
800017bc:	20 13       	sub	r3,1
800017be:	70 08       	ld.w	r8,r8[0x0]
800017c0:	12 38       	cp.w	r8,r9
800017c2:	cf 10       	breq	800017a4 <_malloc_r+0x288>
800017c4:	a1 7b       	lsl	r11,0x1
800017c6:	68 18       	ld.w	r8,r4[0x4]
800017c8:	10 3b       	cp.w	r11,r8
800017ca:	e0 8b 00 11 	brhi	800017ec <_malloc_r+0x2d0>
800017ce:	58 0b       	cp.w	r11,0
800017d0:	c0 e0       	breq	800017ec <_malloc_r+0x2d0>
800017d2:	04 93       	mov	r3,r2
800017d4:	c0 38       	rjmp	800017da <_malloc_r+0x2be>
800017d6:	2f c3       	sub	r3,-4
800017d8:	a1 7b       	lsl	r11,0x1
800017da:	f7 e8 00 09 	and	r9,r11,r8
800017de:	ca 71       	brne	8000172c <_malloc_r+0x210>
800017e0:	cf bb       	rjmp	800017d6 <_malloc_r+0x2ba>
800017e2:	00 00       	add	r0,r0
800017e4:	00 00       	add	r0,r0
800017e6:	00 10       	sub	r0,r0
800017e8:	80 00       	ld.sh	r0,r0[0x0]
800017ea:	19 6e       	ld.uh	lr,--r12
800017ec:	68 23       	ld.w	r3,r4[0x8]
800017ee:	66 12       	ld.w	r2,r3[0x4]
800017f0:	e0 12 ff fc 	andl	r2,0xfffc
800017f4:	0e 32       	cp.w	r2,r7
800017f6:	5f 39       	srlo	r9
800017f8:	e4 07 01 08 	sub	r8,r2,r7
800017fc:	58 f8       	cp.w	r8,15
800017fe:	5f aa       	srle	r10
80001800:	f5 e9 10 09 	or	r9,r10,r9
80001804:	e0 80 00 a2 	breq	80001948 <_malloc_r+0x42c>
80001808:	4c 88       	lddpc	r8,80001928 <_malloc_r+0x40c>
8000180a:	70 01       	ld.w	r1,r8[0x0]
8000180c:	4c 88       	lddpc	r8,8000192c <_malloc_r+0x410>
8000180e:	2f 01       	sub	r1,-16
80001810:	70 08       	ld.w	r8,r8[0x0]
80001812:	0e 01       	add	r1,r7
80001814:	5b f8       	cp.w	r8,-1
80001816:	c0 40       	breq	8000181e <_malloc_r+0x302>
80001818:	28 11       	sub	r1,-127
8000181a:	e0 11 ff 80 	andl	r1,0xff80
8000181e:	02 9b       	mov	r11,r1
80001820:	0a 9c       	mov	r12,r5
80001822:	f0 1f 00 44 	mcall	80001930 <_malloc_r+0x414>
80001826:	18 96       	mov	r6,r12
80001828:	5b fc       	cp.w	r12,-1
8000182a:	c6 e0       	breq	80001906 <_malloc_r+0x3ea>
8000182c:	e6 02 00 08 	add	r8,r3,r2
80001830:	10 3c       	cp.w	r12,r8
80001832:	c0 32       	brcc	80001838 <_malloc_r+0x31c>
80001834:	08 33       	cp.w	r3,r4
80001836:	c6 81       	brne	80001906 <_malloc_r+0x3ea>
80001838:	4b fa       	lddpc	r10,80001934 <_malloc_r+0x418>
8000183a:	74 09       	ld.w	r9,r10[0x0]
8000183c:	e2 09 00 09 	add	r9,r1,r9
80001840:	95 09       	st.w	r10[0x0],r9
80001842:	10 36       	cp.w	r6,r8
80001844:	c0 a1       	brne	80001858 <_malloc_r+0x33c>
80001846:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
8000184a:	c0 71       	brne	80001858 <_malloc_r+0x33c>
8000184c:	e2 02 00 02 	add	r2,r1,r2
80001850:	68 28       	ld.w	r8,r4[0x8]
80001852:	a1 a2       	sbr	r2,0x0
80001854:	91 12       	st.w	r8[0x4],r2
80001856:	c4 c8       	rjmp	800018ee <_malloc_r+0x3d2>
80001858:	4b 5a       	lddpc	r10,8000192c <_malloc_r+0x410>
8000185a:	74 0b       	ld.w	r11,r10[0x0]
8000185c:	5b fb       	cp.w	r11,-1
8000185e:	c0 31       	brne	80001864 <_malloc_r+0x348>
80001860:	95 06       	st.w	r10[0x0],r6
80001862:	c0 68       	rjmp	8000186e <_malloc_r+0x352>
80001864:	ec 09 00 09 	add	r9,r6,r9
80001868:	4b 3a       	lddpc	r10,80001934 <_malloc_r+0x418>
8000186a:	10 19       	sub	r9,r8
8000186c:	95 09       	st.w	r10[0x0],r9
8000186e:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80001872:	f0 09 11 08 	rsub	r9,r8,8
80001876:	58 08       	cp.w	r8,0
80001878:	f2 08 17 10 	movne	r8,r9
8000187c:	ed d8 e1 06 	addne	r6,r6,r8
80001880:	28 08       	sub	r8,-128
80001882:	ec 01 00 01 	add	r1,r6,r1
80001886:	0a 9c       	mov	r12,r5
80001888:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
8000188c:	f0 01 01 01 	sub	r1,r8,r1
80001890:	02 9b       	mov	r11,r1
80001892:	f0 1f 00 28 	mcall	80001930 <_malloc_r+0x414>
80001896:	4a 88       	lddpc	r8,80001934 <_malloc_r+0x418>
80001898:	5b fc       	cp.w	r12,-1
8000189a:	ec 0c 17 00 	moveq	r12,r6
8000189e:	f9 b1 00 00 	moveq	r1,0
800018a2:	70 09       	ld.w	r9,r8[0x0]
800018a4:	0c 1c       	sub	r12,r6
800018a6:	89 26       	st.w	r4[0x8],r6
800018a8:	02 0c       	add	r12,r1
800018aa:	12 01       	add	r1,r9
800018ac:	a1 ac       	sbr	r12,0x0
800018ae:	91 01       	st.w	r8[0x0],r1
800018b0:	8d 1c       	st.w	r6[0x4],r12
800018b2:	08 33       	cp.w	r3,r4
800018b4:	c1 d0       	breq	800018ee <_malloc_r+0x3d2>
800018b6:	58 f2       	cp.w	r2,15
800018b8:	e0 8b 00 05 	brhi	800018c2 <_malloc_r+0x3a6>
800018bc:	30 18       	mov	r8,1
800018be:	8d 18       	st.w	r6[0x4],r8
800018c0:	c2 38       	rjmp	80001906 <_malloc_r+0x3ea>
800018c2:	30 59       	mov	r9,5
800018c4:	20 c2       	sub	r2,12
800018c6:	e0 12 ff f8 	andl	r2,0xfff8
800018ca:	e6 02 00 08 	add	r8,r3,r2
800018ce:	91 29       	st.w	r8[0x8],r9
800018d0:	91 19       	st.w	r8[0x4],r9
800018d2:	66 18       	ld.w	r8,r3[0x4]
800018d4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800018d8:	e5 e8 10 08 	or	r8,r2,r8
800018dc:	87 18       	st.w	r3[0x4],r8
800018de:	58 f2       	cp.w	r2,15
800018e0:	e0 88 00 07 	brls	800018ee <_malloc_r+0x3d2>
800018e4:	e6 cb ff f8 	sub	r11,r3,-8
800018e8:	0a 9c       	mov	r12,r5
800018ea:	f0 1f 00 14 	mcall	80001938 <_malloc_r+0x41c>
800018ee:	49 49       	lddpc	r9,8000193c <_malloc_r+0x420>
800018f0:	72 0a       	ld.w	r10,r9[0x0]
800018f2:	49 18       	lddpc	r8,80001934 <_malloc_r+0x418>
800018f4:	70 08       	ld.w	r8,r8[0x0]
800018f6:	14 38       	cp.w	r8,r10
800018f8:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800018fc:	49 19       	lddpc	r9,80001940 <_malloc_r+0x424>
800018fe:	72 0a       	ld.w	r10,r9[0x0]
80001900:	14 38       	cp.w	r8,r10
80001902:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80001906:	68 28       	ld.w	r8,r4[0x8]
80001908:	70 18       	ld.w	r8,r8[0x4]
8000190a:	e0 18 ff fc 	andl	r8,0xfffc
8000190e:	0e 38       	cp.w	r8,r7
80001910:	5f 39       	srlo	r9
80001912:	0e 18       	sub	r8,r7
80001914:	58 f8       	cp.w	r8,15
80001916:	5f aa       	srle	r10
80001918:	f5 e9 10 09 	or	r9,r10,r9
8000191c:	c1 60       	breq	80001948 <_malloc_r+0x42c>
8000191e:	0a 9c       	mov	r12,r5
80001920:	f0 1f 00 09 	mcall	80001944 <_malloc_r+0x428>
80001924:	d8 3a       	popm	r0-r7,pc,r12=0
80001926:	00 00       	add	r0,r0
80001928:	00 00       	add	r0,r0
8000192a:	05 80       	ld.ub	r0,r2[0x0]
8000192c:	00 00       	add	r0,r0
8000192e:	04 1c       	sub	r12,r2
80001930:	80 00       	ld.sh	r0,r0[0x0]
80001932:	19 70       	ld.ub	r0,--r12
80001934:	00 00       	add	r0,r0
80001936:	05 84       	ld.ub	r4,r2[0x0]
80001938:	80 00       	ld.sh	r0,r0[0x0]
8000193a:	1a 8c       	andn	r12,sp
8000193c:	00 00       	add	r0,r0
8000193e:	05 7c       	ld.ub	r12,--r2
80001940:	00 00       	add	r0,r0
80001942:	05 78       	ld.ub	r8,--r2
80001944:	80 00       	ld.sh	r0,r0[0x0]
80001946:	19 6e       	ld.uh	lr,--r12
80001948:	68 26       	ld.w	r6,r4[0x8]
8000194a:	a1 a8       	sbr	r8,0x0
8000194c:	0e 99       	mov	r9,r7
8000194e:	a1 a9       	sbr	r9,0x0
80001950:	8d 19       	st.w	r6[0x4],r9
80001952:	ec 07 00 07 	add	r7,r6,r7
80001956:	0a 9c       	mov	r12,r5
80001958:	89 27       	st.w	r4[0x8],r7
8000195a:	8f 18       	st.w	r7[0x4],r8
8000195c:	f0 1f 00 03 	mcall	80001968 <_malloc_r+0x44c>
80001960:	ec cc ff f8 	sub	r12,r6,-8
80001964:	d8 32       	popm	r0-r7,pc
80001966:	00 00       	add	r0,r0
80001968:	80 00       	ld.sh	r0,r0[0x0]
8000196a:	19 6e       	ld.uh	lr,--r12

8000196c <__malloc_lock>:
8000196c:	5e fc       	retal	r12

8000196e <__malloc_unlock>:
8000196e:	5e fc       	retal	r12

80001970 <_sbrk_r>:
80001970:	d4 21       	pushm	r4-r7,lr
80001972:	30 08       	mov	r8,0
80001974:	18 97       	mov	r7,r12
80001976:	48 76       	lddpc	r6,80001990 <_sbrk_r+0x20>
80001978:	16 9c       	mov	r12,r11
8000197a:	8d 08       	st.w	r6[0x0],r8
8000197c:	f0 1f 00 06 	mcall	80001994 <_sbrk_r+0x24>
80001980:	5b fc       	cp.w	r12,-1
80001982:	c0 51       	brne	8000198c <_sbrk_r+0x1c>
80001984:	6c 08       	ld.w	r8,r6[0x0]
80001986:	58 08       	cp.w	r8,0
80001988:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000198c:	d8 22       	popm	r4-r7,pc
8000198e:	00 00       	add	r0,r0
80001990:	00 00       	add	r0,r0
80001992:	05 d0       	ld.ub	r0,r2[0x5]
80001994:	80 00       	ld.sh	r0,r0[0x0]
80001996:	19 98       	ld.ub	r8,r12[0x1]

80001998 <_sbrk>:
80001998:	d4 01       	pushm	lr
8000199a:	48 c8       	lddpc	r8,800019c8 <_sbrk+0x30>
8000199c:	70 09       	ld.w	r9,r8[0x0]
8000199e:	58 09       	cp.w	r9,0
800019a0:	c0 31       	brne	800019a6 <_sbrk+0xe>
800019a2:	48 b9       	lddpc	r9,800019cc <_sbrk+0x34>
800019a4:	91 09       	st.w	r8[0x0],r9
800019a6:	48 99       	lddpc	r9,800019c8 <_sbrk+0x30>
800019a8:	48 aa       	lddpc	r10,800019d0 <_sbrk+0x38>
800019aa:	72 08       	ld.w	r8,r9[0x0]
800019ac:	f0 0c 00 0c 	add	r12,r8,r12
800019b0:	14 3c       	cp.w	r12,r10
800019b2:	e0 8b 00 04 	brhi	800019ba <_sbrk+0x22>
800019b6:	93 0c       	st.w	r9[0x0],r12
800019b8:	c0 68       	rjmp	800019c4 <_sbrk+0x2c>
800019ba:	f0 1f 00 07 	mcall	800019d4 <_sbrk+0x3c>
800019be:	30 c8       	mov	r8,12
800019c0:	99 08       	st.w	r12[0x0],r8
800019c2:	3f f8       	mov	r8,-1
800019c4:	10 9c       	mov	r12,r8
800019c6:	d8 02       	popm	pc
800019c8:	00 00       	add	r0,r0
800019ca:	05 ac       	ld.ub	r12,r2[0x2]
800019cc:	00 00       	add	r0,r0
800019ce:	05 d8       	ld.ub	r8,r2[0x5]
800019d0:	00 00       	add	r0,r0
800019d2:	e0 00       	*unknown*
800019d4:	80 00       	ld.sh	r0,r0[0x0]
800019d6:	19 d8       	ld.ub	r8,r12[0x5]

800019d8 <__errno>:
800019d8:	48 28       	lddpc	r8,800019e0 <__errno+0x8>
800019da:	70 0c       	ld.w	r12,r8[0x0]
800019dc:	2f 4c       	sub	r12,-12
800019de:	5e fc       	retal	r12
800019e0:	00 00       	add	r0,r0
800019e2:	05 10       	ld.sh	r0,r2++

800019e4 <_malloc_trim_r>:
800019e4:	d4 21       	pushm	r4-r7,lr
800019e6:	16 95       	mov	r5,r11
800019e8:	18 97       	mov	r7,r12
800019ea:	f0 1f 00 23 	mcall	80001a74 <_malloc_trim_r+0x90>
800019ee:	4a 34       	lddpc	r4,80001a78 <_malloc_trim_r+0x94>
800019f0:	68 28       	ld.w	r8,r4[0x8]
800019f2:	70 16       	ld.w	r6,r8[0x4]
800019f4:	e0 16 ff fc 	andl	r6,0xfffc
800019f8:	ec c8 ff 91 	sub	r8,r6,-111
800019fc:	f0 05 01 05 	sub	r5,r8,r5
80001a00:	e0 15 ff 80 	andl	r5,0xff80
80001a04:	ea c5 00 80 	sub	r5,r5,128
80001a08:	e0 45 00 7f 	cp.w	r5,127
80001a0c:	e0 8a 00 23 	brle	80001a52 <_malloc_trim_r+0x6e>
80001a10:	30 0b       	mov	r11,0
80001a12:	0e 9c       	mov	r12,r7
80001a14:	f0 1f 00 1a 	mcall	80001a7c <_malloc_trim_r+0x98>
80001a18:	68 28       	ld.w	r8,r4[0x8]
80001a1a:	0c 08       	add	r8,r6
80001a1c:	10 3c       	cp.w	r12,r8
80001a1e:	c1 a1       	brne	80001a52 <_malloc_trim_r+0x6e>
80001a20:	ea 0b 11 00 	rsub	r11,r5,0
80001a24:	0e 9c       	mov	r12,r7
80001a26:	f0 1f 00 16 	mcall	80001a7c <_malloc_trim_r+0x98>
80001a2a:	5b fc       	cp.w	r12,-1
80001a2c:	c1 71       	brne	80001a5a <_malloc_trim_r+0x76>
80001a2e:	30 0b       	mov	r11,0
80001a30:	0e 9c       	mov	r12,r7
80001a32:	f0 1f 00 13 	mcall	80001a7c <_malloc_trim_r+0x98>
80001a36:	68 28       	ld.w	r8,r4[0x8]
80001a38:	f8 08 01 09 	sub	r9,r12,r8
80001a3c:	58 f9       	cp.w	r9,15
80001a3e:	e0 8a 00 0a 	brle	80001a52 <_malloc_trim_r+0x6e>
80001a42:	a1 a9       	sbr	r9,0x0
80001a44:	91 19       	st.w	r8[0x4],r9
80001a46:	48 f8       	lddpc	r8,80001a80 <_malloc_trim_r+0x9c>
80001a48:	70 09       	ld.w	r9,r8[0x0]
80001a4a:	48 f8       	lddpc	r8,80001a84 <_malloc_trim_r+0xa0>
80001a4c:	f8 09 01 09 	sub	r9,r12,r9
80001a50:	91 09       	st.w	r8[0x0],r9
80001a52:	0e 9c       	mov	r12,r7
80001a54:	f0 1f 00 0d 	mcall	80001a88 <_malloc_trim_r+0xa4>
80001a58:	d8 2a       	popm	r4-r7,pc,r12=0
80001a5a:	68 28       	ld.w	r8,r4[0x8]
80001a5c:	0a 16       	sub	r6,r5
80001a5e:	a1 a6       	sbr	r6,0x0
80001a60:	91 16       	st.w	r8[0x4],r6
80001a62:	48 98       	lddpc	r8,80001a84 <_malloc_trim_r+0xa0>
80001a64:	70 09       	ld.w	r9,r8[0x0]
80001a66:	0a 19       	sub	r9,r5
80001a68:	0e 9c       	mov	r12,r7
80001a6a:	91 09       	st.w	r8[0x0],r9
80001a6c:	f0 1f 00 07 	mcall	80001a88 <_malloc_trim_r+0xa4>
80001a70:	da 2a       	popm	r4-r7,pc,r12=1
80001a72:	00 00       	add	r0,r0
80001a74:	80 00       	ld.sh	r0,r0[0x0]
80001a76:	19 6c       	ld.uh	r12,--r12
80001a78:	00 00       	add	r0,r0
80001a7a:	00 10       	sub	r0,r0
80001a7c:	80 00       	ld.sh	r0,r0[0x0]
80001a7e:	19 70       	ld.ub	r0,--r12
80001a80:	00 00       	add	r0,r0
80001a82:	04 1c       	sub	r12,r2
80001a84:	00 00       	add	r0,r0
80001a86:	05 84       	ld.ub	r4,r2[0x0]
80001a88:	80 00       	ld.sh	r0,r0[0x0]
80001a8a:	19 6e       	ld.uh	lr,--r12

80001a8c <_free_r>:
80001a8c:	d4 21       	pushm	r4-r7,lr
80001a8e:	16 96       	mov	r6,r11
80001a90:	18 97       	mov	r7,r12
80001a92:	58 0b       	cp.w	r11,0
80001a94:	e0 80 00 c8 	breq	80001c24 <_free_r+0x198>
80001a98:	f0 1f 00 4c 	mcall	80001bc8 <_free_r+0x13c>
80001a9c:	20 86       	sub	r6,8
80001a9e:	4c ca       	lddpc	r10,80001bcc <_free_r+0x140>
80001aa0:	6c 18       	ld.w	r8,r6[0x4]
80001aa2:	74 2e       	ld.w	lr,r10[0x8]
80001aa4:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80001aa8:	a1 c8       	cbr	r8,0x0
80001aaa:	ec 08 00 09 	add	r9,r6,r8
80001aae:	72 1b       	ld.w	r11,r9[0x4]
80001ab0:	e0 1b ff fc 	andl	r11,0xfffc
80001ab4:	1c 39       	cp.w	r9,lr
80001ab6:	c1 d1       	brne	80001af0 <_free_r+0x64>
80001ab8:	f6 08 00 08 	add	r8,r11,r8
80001abc:	58 0c       	cp.w	r12,0
80001abe:	c0 81       	brne	80001ace <_free_r+0x42>
80001ac0:	6c 09       	ld.w	r9,r6[0x0]
80001ac2:	12 16       	sub	r6,r9
80001ac4:	12 08       	add	r8,r9
80001ac6:	6c 3b       	ld.w	r11,r6[0xc]
80001ac8:	6c 29       	ld.w	r9,r6[0x8]
80001aca:	97 29       	st.w	r11[0x8],r9
80001acc:	93 3b       	st.w	r9[0xc],r11
80001ace:	10 99       	mov	r9,r8
80001ad0:	95 26       	st.w	r10[0x8],r6
80001ad2:	a1 a9       	sbr	r9,0x0
80001ad4:	8d 19       	st.w	r6[0x4],r9
80001ad6:	4b f9       	lddpc	r9,80001bd0 <_free_r+0x144>
80001ad8:	72 09       	ld.w	r9,r9[0x0]
80001ada:	12 38       	cp.w	r8,r9
80001adc:	c0 63       	brcs	80001ae8 <_free_r+0x5c>
80001ade:	4b e8       	lddpc	r8,80001bd4 <_free_r+0x148>
80001ae0:	0e 9c       	mov	r12,r7
80001ae2:	70 0b       	ld.w	r11,r8[0x0]
80001ae4:	f0 1f 00 3d 	mcall	80001bd8 <_free_r+0x14c>
80001ae8:	0e 9c       	mov	r12,r7
80001aea:	f0 1f 00 3d 	mcall	80001bdc <_free_r+0x150>
80001aee:	d8 22       	popm	r4-r7,pc
80001af0:	93 1b       	st.w	r9[0x4],r11
80001af2:	58 0c       	cp.w	r12,0
80001af4:	c0 30       	breq	80001afa <_free_r+0x6e>
80001af6:	30 0c       	mov	r12,0
80001af8:	c1 08       	rjmp	80001b18 <_free_r+0x8c>
80001afa:	6c 0e       	ld.w	lr,r6[0x0]
80001afc:	f4 c5 ff f8 	sub	r5,r10,-8
80001b00:	1c 16       	sub	r6,lr
80001b02:	1c 08       	add	r8,lr
80001b04:	6c 2e       	ld.w	lr,r6[0x8]
80001b06:	0a 3e       	cp.w	lr,r5
80001b08:	f9 bc 00 01 	moveq	r12,1
80001b0c:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80001b10:	eb fe 1a 02 	st.wne	r5[0x8],lr
80001b14:	fd f5 1a 03 	st.wne	lr[0xc],r5
80001b18:	f2 0b 00 0e 	add	lr,r9,r11
80001b1c:	7c 1e       	ld.w	lr,lr[0x4]
80001b1e:	ed be 00 00 	bld	lr,0x0
80001b22:	c1 30       	breq	80001b48 <_free_r+0xbc>
80001b24:	16 08       	add	r8,r11
80001b26:	58 0c       	cp.w	r12,0
80001b28:	c0 c1       	brne	80001b40 <_free_r+0xb4>
80001b2a:	4a 9e       	lddpc	lr,80001bcc <_free_r+0x140>
80001b2c:	72 2b       	ld.w	r11,r9[0x8]
80001b2e:	2f 8e       	sub	lr,-8
80001b30:	1c 3b       	cp.w	r11,lr
80001b32:	c0 71       	brne	80001b40 <_free_r+0xb4>
80001b34:	97 36       	st.w	r11[0xc],r6
80001b36:	97 26       	st.w	r11[0x8],r6
80001b38:	8d 2b       	st.w	r6[0x8],r11
80001b3a:	8d 3b       	st.w	r6[0xc],r11
80001b3c:	30 1c       	mov	r12,1
80001b3e:	c0 58       	rjmp	80001b48 <_free_r+0xbc>
80001b40:	72 2b       	ld.w	r11,r9[0x8]
80001b42:	72 39       	ld.w	r9,r9[0xc]
80001b44:	93 2b       	st.w	r9[0x8],r11
80001b46:	97 39       	st.w	r11[0xc],r9
80001b48:	10 99       	mov	r9,r8
80001b4a:	ec 08 09 08 	st.w	r6[r8],r8
80001b4e:	a1 a9       	sbr	r9,0x0
80001b50:	8d 19       	st.w	r6[0x4],r9
80001b52:	58 0c       	cp.w	r12,0
80001b54:	c6 51       	brne	80001c1e <_free_r+0x192>
80001b56:	e0 48 01 ff 	cp.w	r8,511
80001b5a:	e0 8b 00 13 	brhi	80001b80 <_free_r+0xf4>
80001b5e:	a3 98       	lsr	r8,0x3
80001b60:	f4 08 00 39 	add	r9,r10,r8<<0x3
80001b64:	72 2b       	ld.w	r11,r9[0x8]
80001b66:	8d 39       	st.w	r6[0xc],r9
80001b68:	8d 2b       	st.w	r6[0x8],r11
80001b6a:	97 36       	st.w	r11[0xc],r6
80001b6c:	93 26       	st.w	r9[0x8],r6
80001b6e:	a3 48       	asr	r8,0x2
80001b70:	74 19       	ld.w	r9,r10[0x4]
80001b72:	30 1b       	mov	r11,1
80001b74:	f6 08 09 48 	lsl	r8,r11,r8
80001b78:	f3 e8 10 08 	or	r8,r9,r8
80001b7c:	95 18       	st.w	r10[0x4],r8
80001b7e:	c5 08       	rjmp	80001c1e <_free_r+0x192>
80001b80:	f0 0b 16 09 	lsr	r11,r8,0x9
80001b84:	58 4b       	cp.w	r11,4
80001b86:	e0 8b 00 06 	brhi	80001b92 <_free_r+0x106>
80001b8a:	f0 0b 16 06 	lsr	r11,r8,0x6
80001b8e:	2c 8b       	sub	r11,-56
80001b90:	c2 b8       	rjmp	80001be6 <_free_r+0x15a>
80001b92:	59 4b       	cp.w	r11,20
80001b94:	e0 8b 00 04 	brhi	80001b9c <_free_r+0x110>
80001b98:	2a 5b       	sub	r11,-91
80001b9a:	c2 68       	rjmp	80001be6 <_free_r+0x15a>
80001b9c:	e0 4b 00 54 	cp.w	r11,84
80001ba0:	e0 8b 00 06 	brhi	80001bac <_free_r+0x120>
80001ba4:	f0 0b 16 0c 	lsr	r11,r8,0xc
80001ba8:	29 2b       	sub	r11,-110
80001baa:	c1 e8       	rjmp	80001be6 <_free_r+0x15a>
80001bac:	e0 4b 01 54 	cp.w	r11,340
80001bb0:	e0 8b 00 06 	brhi	80001bbc <_free_r+0x130>
80001bb4:	f0 0b 16 0f 	lsr	r11,r8,0xf
80001bb8:	28 9b       	sub	r11,-119
80001bba:	c1 68       	rjmp	80001be6 <_free_r+0x15a>
80001bbc:	e0 4b 05 54 	cp.w	r11,1364
80001bc0:	e0 88 00 10 	brls	80001be0 <_free_r+0x154>
80001bc4:	37 eb       	mov	r11,126
80001bc6:	c1 08       	rjmp	80001be6 <_free_r+0x15a>
80001bc8:	80 00       	ld.sh	r0,r0[0x0]
80001bca:	19 6c       	ld.uh	r12,--r12
80001bcc:	00 00       	add	r0,r0
80001bce:	00 10       	sub	r0,r0
80001bd0:	00 00       	add	r0,r0
80001bd2:	04 18       	sub	r8,r2
80001bd4:	00 00       	add	r0,r0
80001bd6:	05 80       	ld.ub	r0,r2[0x0]
80001bd8:	80 00       	ld.sh	r0,r0[0x0]
80001bda:	19 e4       	ld.ub	r4,r12[0x6]
80001bdc:	80 00       	ld.sh	r0,r0[0x0]
80001bde:	19 6e       	ld.uh	lr,--r12
80001be0:	f0 0b 16 12 	lsr	r11,r8,0x12
80001be4:	28 4b       	sub	r11,-124
80001be6:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80001bea:	78 29       	ld.w	r9,r12[0x8]
80001bec:	18 39       	cp.w	r9,r12
80001bee:	c0 e1       	brne	80001c0a <_free_r+0x17e>
80001bf0:	74 18       	ld.w	r8,r10[0x4]
80001bf2:	a3 4b       	asr	r11,0x2
80001bf4:	30 1c       	mov	r12,1
80001bf6:	f8 0b 09 4b 	lsl	r11,r12,r11
80001bfa:	f1 eb 10 0b 	or	r11,r8,r11
80001bfe:	12 98       	mov	r8,r9
80001c00:	95 1b       	st.w	r10[0x4],r11
80001c02:	c0 a8       	rjmp	80001c16 <_free_r+0x18a>
80001c04:	72 29       	ld.w	r9,r9[0x8]
80001c06:	18 39       	cp.w	r9,r12
80001c08:	c0 60       	breq	80001c14 <_free_r+0x188>
80001c0a:	72 1a       	ld.w	r10,r9[0x4]
80001c0c:	e0 1a ff fc 	andl	r10,0xfffc
80001c10:	14 38       	cp.w	r8,r10
80001c12:	cf 93       	brcs	80001c04 <_free_r+0x178>
80001c14:	72 38       	ld.w	r8,r9[0xc]
80001c16:	8d 38       	st.w	r6[0xc],r8
80001c18:	8d 29       	st.w	r6[0x8],r9
80001c1a:	93 36       	st.w	r9[0xc],r6
80001c1c:	91 26       	st.w	r8[0x8],r6
80001c1e:	0e 9c       	mov	r12,r7
80001c20:	f0 1f 00 02 	mcall	80001c28 <_free_r+0x19c>
80001c24:	d8 22       	popm	r4-r7,pc
80001c26:	00 00       	add	r0,r0
80001c28:	80 00       	ld.sh	r0,r0[0x0]
80001c2a:	19 6e       	ld.uh	lr,--r12

Disassembly of section .exception:

80001e00 <_evba>:
	...

80001e28 <_handle_Privilege_Violation>:
	.global _evba
	.type _evba, @function
_evba:
	.org  0x28
_handle_Privilege_Violation:
	rjmp privilegedCalls					//Check for legal priviledged calls.
80001e28:	c7 a8       	rjmp	80001f1c <privilegedCalls>
	...

80001f00 <_handle_Supervisor_Call>:

	.org  0x100
_handle_Supervisor_Call:
	mov pc,lr								//ROSA Kernel function calls pass through here.
80001f00:	1c 9f       	mov	pc,lr

80001f02 <_int0>:
 *  in this case: timerISR().
 *
 **********************************************************/
	//TC0 interrupt
_int0:
	mov r12,lo(AVR32_INTC_ADDRESS)
80001f02:	e0 6c 08 00 	mov	r12,2048
	orh r12,hi(AVR32_INTC_ADDRESS)
80001f06:	ea 1c ff ff 	orh	r12,0xffff
	ld.w r12,r12[AVR32_INTC_IRR + GRP14]	//TC irq grp is at GRP14
80001f0a:	f8 fc 01 38 	ld.w	r12,r12[312]
	andl r12,LINE0							//TC0 irq is at line 0
80001f0e:	e0 1c 00 01 	andl	r12,0x1
	cp.w r12,LINE0							//Is line 0 sending interrupt signal?
80001f12:	58 1c       	cp.w	r12,1
	brne _int0_exit							//No, exit
80001f14:	c0 31       	brne	80001f1a <_int0_exit>
	lda.w r12,timerISR						//Pointer to the timer ISR
80001f16:	4b 9c       	lddpc	r12,80001ff8 <contextRestoreFromISR+0x40>
	mov pc,r12								//Yes, go to the ISR.
80001f18:	18 9f       	mov	pc,r12

80001f1a <_int0_exit>:
_int0_exit:
	rete
80001f1a:	d6 03       	rete

80001f1c <privilegedCalls>:
//------------------------------------
//USERSR - user SR at the offending instant
//USERPC - user PC which contain the offending instruction

	//Investigate is this is a legal disable/enable interrupt requests
	pushm r11,r12
80001f1c:	d3 01       	pushm	r11-r12
	ld.w r11,sp[USERPC]
80001f1e:	7a 3b       	ld.w	r11,sp[0xc]
	mov r12,r11
80001f20:	16 9c       	mov	r12,r11
	sub r12,-0x02							//Modify to get return address
80001f22:	2f ec       	sub	r12,-2
	st.w sp[USERPC],r12						//Put return address on the stack
80001f24:	9b 3c       	st.w	sp[0xc],r12

80001f26 <priv_interruptdisable>:

	//Look for interruptDisable
priv_interruptdisable:
	lda.w r12,interruptDisable
80001f26:	4b 6c       	lddpc	r12,80001ffc <contextRestoreFromISR+0x44>
	cp.w r11,r12
80001f28:	18 3b       	cp.w	r11,r12
	brne priv_interruptenable
80001f2a:	c0 61       	brne	80001f36 <priv_interruptenable>
	ld.w r12,sp[USERSR]
80001f2c:	7a 2c       	ld.w	r12,sp[0x8]
	sbr r12,AVR32_SR_GM						//Ok, disable interrupts
80001f2e:	b1 ac       	sbr	r12,0x10
	st.w sp[USERSR],r12
80001f30:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80001f32:	d3 02       	popm	r11-r12
	rete
80001f34:	d6 03       	rete

80001f36 <priv_interruptenable>:

	//Look for interruptEnable
priv_interruptenable:
	lda.w r12,interruptEnable
80001f36:	4b 3c       	lddpc	r12,80002000 <contextRestoreFromISR+0x48>
	cp.w r11,r12
80001f38:	18 3b       	cp.w	r11,r12
	brne privexception
80001f3a:	c0 61       	brne	80001f46 <privexception>
	ld.w r12,sp[USERSR]
80001f3c:	7a 2c       	ld.w	r12,sp[0x8]
	cbr r12,AVR32_SR_GM						//Ok, enable interrupts
80001f3e:	b1 cc       	cbr	r12,0x10
	st.w sp[USERSR],r12
80001f40:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80001f42:	d3 02       	popm	r11-r12
	rete
80001f44:	d6 03       	rete

80001f46 <privexception>:

privexception:								//Not ok.
	rjmp $									//End here as we received an illegal privileged call.
80001f46:	c0 08       	rjmp	80001f46 <privexception>

80001f48 <interruptInit>:
 *
 * C prototypes:
 * 	extern void interruptInit(void);
 **********************************************************/
interruptInit:
	pushm r11,r12,lr
80001f48:	d7 01       	pushm	r11-r12,lr
	//Get autovector offset to _int0
	lda.w r11,_int0
80001f4a:	fe cb 00 48 	sub	r11,pc,72
	lda.w r12,_evba
80001f4e:	4a ec       	lddpc	r12,80002004 <contextRestoreFromISR+0x4c>
	sub r11,r12
80001f50:	18 1b       	sub	r11,r12

	//Calculate int level
	mov r12,INTLEVEL0
80001f52:	30 0c       	mov	r12,0
	or r11,r11,r12 << INTLEVEL_OFFSET
80001f54:	f7 ec 11 eb 	or	r11,r11,r12<<0x1e

	//Store the _int0 level and autovector offset to the interrupt priority register
	mov r12,lo(AVR32_INTC_ADDRESS+GRP14)
80001f58:	e0 6c 08 38 	mov	r12,2104
	orh r12,hi(AVR32_INTC_ADDRESS+GRP14)
80001f5c:	ea 1c ff ff 	orh	r12,0xffff
	st.w r12,r11
80001f60:	99 0b       	st.w	r12[0x0],r11
	popm r11,r12,lr
80001f62:	d7 02       	popm	r11-r12,lr
	mov pc,lr
80001f64:	1c 9f       	mov	pc,lr

80001f66 <interruptDisable>:
 * C prototype:
 * 	void interruptDisable(void);
 *
 *********************************************************/
interruptDisable:
	ssrf AVR32_SR_GM
80001f66:	d3 03       	ssrf	0x10
	mov pc,lr
80001f68:	1c 9f       	mov	pc,lr

80001f6a <interruptEnable>:
 * C prototype:
 * 	void interruptEnable(void);
 *
 *********************************************************/
interruptEnable:
	csrf AVR32_SR_GM
80001f6a:	d5 03       	csrf	0x10
	mov pc,lr
80001f6c:	1c 9f       	mov	pc,lr

80001f6e <isInterruptEnabled>:
 * C prototype:
 * 	int isInterruptEnabled(void);
 *
 *********************************************************/
isInterruptEnabled:
	mfsr r12,0
80001f6e:	e1 bc 00 00 	mfsr	r12,0x0
	lsr r12,AVR32_SR_GM
80001f72:	b1 8c       	lsr	r12,0x10
	andl r12,TRUE
80001f74:	e0 1c 00 01 	andl	r12,0x1
	eorl r12,TRUE
80001f78:	ec 1c 00 01 	eorl	r12,0x1
	mov pc,lr
80001f7c:	1c 9f       	mov	pc,lr

80001f7e <contextSaveFromISR>:
.equ SFINT0_R9, 0x06*0x04+SFINT0OFFSET
.equ SFINT0_R8, 0x07*0x04+SFINT0OFFSET

contextSaveFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
80001f7e:	4a 3c       	lddpc	r12,80002008 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
80001f80:	78 0c       	ld.w	r12,r12[0x0]

	//Save working registers
	st.w r12[TCB.SAVER0],r0
80001f82:	99 60       	st.w	r12[0x18],r0
	ld.w r0,sp[SFINT0_R12]
80001f84:	7a 90       	ld.w	r0,sp[0x24]
	st.w r12[TCB.SAVEREG.R12],r0
80001f86:	99 c0       	st.w	r12[0x30],r0

	//Save SR
	ld.w r0,sp[SFINT0_SR]
80001f88:	7a 60       	ld.w	r0,sp[0x18]
	st.w r12[TCB.SAVESR],r0
80001f8a:	99 80       	st.w	r12[0x20],r0

	//Read register from the stack
	ld.w r8,sp[SFINT0_R8]
80001f8c:	7a d8       	ld.w	r8,sp[0x34]
	ld.w r9,sp[SFINT0_R9]
80001f8e:	7a c9       	ld.w	r9,sp[0x30]
	ld.w r10,sp[SFINT0_R10]
80001f90:	7a ba       	ld.w	r10,sp[0x2c]
	ld.w r11,sp[SFINT0_R11]
80001f92:	7a ab       	ld.w	r11,sp[0x28]

	//Save registers
	mov r0,TCB.SAVEREG.R11
80001f94:	33 40       	mov	r0,52
	add r0,r12
80001f96:	18 00       	add	r0,r12
	stmts r0,r0-r11
80001f98:	ed c0 0f ff 	stmts	r0,r0-r11

	//Save r7_task
	ld.w r0,sp[SFINT0_R7_TASK]
80001f9c:	7a 50       	ld.w	r0,sp[0x14]
	st.w r12[TCB.SAVEREG.R7],r0
80001f9e:	f9 40 00 44 	st.w	r12[68],r0

	//Save RETADDR
	ld.w r0,sp[SFINT0_PC]
80001fa2:	7a 70       	ld.w	r0,sp[0x1c]
	st.w r12[TCB.RETADDR],r0
80001fa4:	99 90       	st.w	r12[0x24],r0

	//Save LR
	ld.w r0,sp[SFINT0_LR]			//This points back to the task
80001fa6:	7a 80       	ld.w	r0,sp[0x20]
	st.w r12[TCB.SAVEREG.LR],r0
80001fa8:	99 a0       	st.w	r12[0x28],r0

	//Save USP
	mov r0,sp
80001faa:	1a 90       	mov	r0,sp
	st.w --sp,r0
80001fac:	1a d0       	st.w	--sp,r0
	stmts sp,sp
80001fae:	ed cd 20 00 	stmts	sp,sp
	ld.w r0,sp++
80001fb2:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEUSP],r0
80001fb4:	99 50       	st.w	r12[0x14],r0

	mov pc,lr
80001fb6:	1c 9f       	mov	pc,lr

80001fb8 <contextRestoreFromISR>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestoreFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
80001fb8:	49 4c       	lddpc	r12,80002008 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
80001fba:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r0,r12[TCB.SAVEUSP]
80001fbc:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
80001fbe:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
80001fc0:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++							//USP is in r0
80001fc4:	1b 00       	ld.w	r0,sp++

	//Restore LR
	ld.w r0,r12[TCB.SAVEREG.LR]
80001fc6:	78 a0       	ld.w	r0,r12[0x28]
	st.w sp[SFINT0_LR],r0					//Restore lr on the stack
80001fc8:	9b 80       	st.w	sp[0x20],r0

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
80001fca:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SFINT0_PC],r0					//Restore return address on stack
80001fcc:	9b 70       	st.w	sp[0x1c],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
80001fce:	33 40       	mov	r0,52
	add r0,r12
80001fd0:	18 00       	add	r0,r12
	ldmts r0,r0-r11
80001fd2:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
80001fd6:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SFINT0_SR],r0					//Put the new SR on the stack
80001fd8:	9b 60       	st.w	sp[0x18],r0

	//Restore of R8-R12
	ld.w r0,r12[TCB.SAVEREG.R12]
80001fda:	78 c0       	ld.w	r0,r12[0x30]
	st.w sp[SFINT0_R12],r0
80001fdc:	9b 90       	st.w	sp[0x24],r0
	st.w sp[SFINT0_R11],r11
80001fde:	9b ab       	st.w	sp[0x28],r11
	st.w sp[SFINT0_R10],r10
80001fe0:	9b ba       	st.w	sp[0x2c],r10
	st.w sp[SFINT0_R9],r9
80001fe2:	9b c9       	st.w	sp[0x30],r9
	st.w sp[SFINT0_R8],r8
80001fe4:	9b d8       	st.w	sp[0x34],r8

	//Restore r7
	ld.w r0,r12[TCB.SAVEREG.R7]				//This is the r7_user
80001fe6:	79 10       	ld.w	r0,r12[0x44]
	st.w sp[SFINT0_R7_TASK],r0				//Save r7_user to the stack, in order to not have the r7_user destroyed.
80001fe8:	9b 50       	st.w	sp[0x14],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
80001fea:	78 60       	ld.w	r0,r12[0x18]

	//Restart timer 0, necessary as timer is stopped by the irq event.
	pushm lr
80001fec:	d4 01       	pushm	lr
	call timerStart
80001fee:	f0 1f 00 08 	mcall	8000200c <contextRestoreFromISR+0x54>
	popm lr
80001ff2:	d4 02       	popm	lr

	//Return back to the ISR handler
	mov pc,lr
80001ff4:	1c 9f       	mov	pc,lr
80001ff6:	00 00       	add	r0,r0
80001ff8:	80 00       	ld.sh	r0,r0[0x0]
80001ffa:	0b 78       	ld.ub	r8,--r5
80001ffc:	80 00       	ld.sh	r0,r0[0x0]
80001ffe:	1f 66       	ld.uh	r6,--pc
80002000:	80 00       	ld.sh	r0,r0[0x0]
80002002:	1f 6a       	ld.uh	r10,--pc
80002004:	80 00       	ld.sh	r0,r0[0x0]
80002006:	1e 00       	add	r0,pc
80002008:	00 00       	add	r0,r0
8000200a:	05 c4       	ld.ub	r4,r2[0x4]
8000200c:	80 00       	ld.sh	r0,r0[0x0]
8000200e:	13 e2       	ld.ub	r2,r9[0x6]
	...
